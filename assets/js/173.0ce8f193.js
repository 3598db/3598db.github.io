(window.webpackJsonp=window.webpackJsonp||[]).push([[173],{529:function(t,a,s){"use strict";s.r(a);var n=s(42),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"你不知道的javascript-上卷"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#你不知道的javascript-上卷"}},[t._v("#")]),t._v(" 你不知道的JavaScript（上卷）")]),t._v(" "),s("h1",{attrs:{id:"第一部分-作用域和闭包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一部分-作用域和闭包"}},[t._v("#")]),t._v(" 第一部分 作用域和闭包")]),t._v(" "),s("h2",{attrs:{id:"第一章-作用域是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一章-作用域是什么"}},[t._v("#")]),t._v(" 第一章 作用域是什么")]),t._v(" "),s("h3",{attrs:{id:"_1-1-编译原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-编译原理"}},[t._v("#")]),t._v(" 1.1 编译原理")]),t._v(" "),s("p",[t._v("JS源代码执行之前一般会经历三个步骤：")]),t._v(" "),s("ol",[s("li",[t._v("分词/词法分析")]),t._v(" "),s("li",[t._v("解析/语法分析")]),t._v(" "),s("li",[t._v("代码生成")])]),t._v(" "),s("h3",{attrs:{id:"_1-2-理解作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-理解作用域"}},[t._v("#")]),t._v(" 1.2 理解作用域")]),t._v(" "),s("p",[t._v("LHS查询与RHS查询：\nRHS查询主要是查询某个变量的值，而LHS查询则是试图找到容器的变量本身，从而可以对其赋值。")]),t._v(" "),s("h3",{attrs:{id:"_1-3-作用域嵌套"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-作用域嵌套"}},[t._v("#")]),t._v(" 1.3 作用域嵌套")]),t._v(" "),s("p",[t._v("当一个块或者函数嵌套在另一个块或者函数中时，就发生了作用域的嵌套。因此，在当前作用域中无法找到某个变量时，引擎就会在外层嵌套的作用域中继续查找，直到找到该变量，或抵达最外层的作用域为止。")]),t._v(" "),s("h2",{attrs:{id:"第二章-词法作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二章-词法作用域"}},[t._v("#")]),t._v(" 第二章 词法作用域")]),t._v(" "),s("h3",{attrs:{id:"_2-1-词法阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-词法阶段"}},[t._v("#")]),t._v(" 2.1 词法阶段")]),t._v(" "),s("p",[t._v("大部分标准语言编译器的第一个阶段叫做词法化。词法化的过程会对源代码中的字符进行检查，如果是有状态的解析过程，还会赋予单词语义。"),s("br"),t._v("\n简单的说，词法作用域就是定义在词法阶段的作用域。换句话说，词法作用域是由你在写代码时将变量和块作用域写在哪里决定的，因此当词法分析器处理代码时会保持作用域不变（大部分情况是这样的）。")]),t._v(" "),s("p",[s("strong",[t._v("无论函数在哪里被调用，也无论它如何被调用，它的词法作用域都只由函数被声明时所处的位置决定。")])]),t._v(" "),s("p",[t._v("词法作用域只会查找一级标识符，如果是对象的某个属性查找，会在找到变量之后，对象属性访问规则会接管属性访问。")]),t._v(" "),s("h3",{attrs:{id:"_2-2-词法欺骗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-词法欺骗"}},[t._v("#")]),t._v(" 2.2 词法欺骗")]),t._v(" "),s("p",[s("strong",[t._v("eval")]),t._v(" "),s("strong",[t._v("with")])]),t._v(" "),s("h2",{attrs:{id:"第三章-函数作用域与块作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第三章-函数作用域与块作用域"}},[t._v("#")]),t._v(" 第三章 函数作用域与块作用域")]),t._v(" "),s("h3",{attrs:{id:"_3-1-函数中的作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-函数中的作用域"}},[t._v("#")]),t._v(" 3.1 函数中的作用域")]),t._v(" "),s("p",[t._v("函数作用域的含义是指，属于这个函数的全部变量都可以在整个函数范围内使用和复用（事实上在嵌套的作用域中也可以使用）。")]),t._v(" "),s("h3",{attrs:{id:"_3-3-函数作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-函数作用域"}},[t._v("#")]),t._v(" 3.3 函数作用域")]),t._v(" "),s("p",[t._v("包装函数的声明以"),s("code",[t._v("(function...")]),t._v("而不仅是以"),s("code",[t._v("function...")]),t._v("开始。尽管这看上去并不是一个很明显的细节，但实际上确实非常重要的区别。函数会被当做函数表达式而不是一个标准的函数声明来处理。")]),t._v(" "),s("p",[s("strong",[t._v("函数声明和函数表达式之间作重要的区别是他们的名称标识符将会绑定在何处。")])]),t._v(" "),s("p",[t._v("函数声明将会被绑定在所在作用域，包装函数将会被绑定在函数自身而不是函数作用域中。")]),t._v(" "),s("h4",{attrs:{id:"_3-3-1-匿名和具名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-1-匿名和具名"}},[t._v("#")]),t._v(" 3.3.1 匿名和具名")]),t._v(" "),s("p",[t._v("匿名函数缺陷：")]),t._v(" "),s("ol",[s("li",[t._v("调用堆栈中没有函数名会导致调试很困难；")]),t._v(" "),s("li",[t._v("在一个事件绑定多个回调函数的情况下，如果需要解绑定某一个函数时，或者需要卸载事件时解绑自身；")]),t._v(" "),s("li",[t._v("可读性/可维护性差")])]),t._v(" "),s("h4",{attrs:{id:"立即执行函数表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#立即执行函数表达式"}},[t._v("#")]),t._v(" 立即执行函数表达式")]),t._v(" "),s("p",[s("strong",[t._v("IIFE")])]),t._v(" "),s("p",[t._v("两种写法：")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("(function(){...})();")])]),t._v(" "),s("li",[s("code",[t._v("(function(){...}());")])])]),t._v(" "),s("p",[t._v("应用场景：\n类似jQuery等类库为保证变量纯净，防止变量暴露，会采用这种方式。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined可以被覆盖，所以采用这种方式获取原生undefined")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("global"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"_3-4-块作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-块作用域"}},[t._v("#")]),t._v(" 3.4 块作用域")]),t._v(" "),s("p",[t._v("表面上JavaScript并没有块级作用域。但仍然有部分语法可以实现。")]),t._v(" "),s("h4",{attrs:{id:"_3-4-1-with"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-1-with"}},[t._v("#")]),t._v(" 3.4.1 with")]),t._v(" "),s("p",[t._v("用with从对象中创建出的作用域仅在with声明中而非外部作用域有效。")]),t._v(" "),s("h4",{attrs:{id:"_3-4-2-try-catch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-2-try-catch"}},[t._v("#")]),t._v(" 3.4.2 try/catch")]),t._v(" "),s("p",[t._v("ES3中规定"),s("code",[t._v("try/catch")]),t._v("的"),s("code",[t._v("catch")]),t._v("分句会创建一个块级作用域，其中声明的变量仅在"),s("code",[t._v("catch")]),t._v("内部有效。")]),t._v(" "),s("p",[t._v("关于"),s("code",[t._v("try/catch")]),t._v("模拟块级作用域的例子：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ReferenceError")]),t._v("\n")])])]),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ReferenceError")]),t._v("\n")])])]),s("h4",{attrs:{id:"_3-4-3-let"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-3-let"}},[t._v("#")]),t._v(" 3.4.3 let")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("let")]),t._v("会创建块级作用域；")]),t._v(" "),s("li",[s("code",[t._v("let")]),t._v("不存在声明提升，也就是常说的会产生暂时性死区；")])]),t._v(" "),s("p",[s("code",[t._v("let")]),t._v("循环会将声明变量绑定在每一次迭代中，类似于下面的行为：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"_3-4-4-const"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-4-const"}},[t._v("#")]),t._v(" 3.4.4 const")]),t._v(" "),s("h2",{attrs:{id:"第四章-提升"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第四章-提升"}},[t._v("#")]),t._v(" 第四章 提升")]),t._v(" "),s("blockquote",[s("p",[t._v("函数作用域和块级作用域的行为是一样的。可以总结为：任何声明在某个作用域内的变量，都将附属于这个作用域。")])]),t._v(" "),s("h3",{attrs:{id:"_4-2-编译器再度来袭"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-编译器再度来袭"}},[t._v("#")]),t._v(" 4.2 编译器再度来袭")]),t._v(" "),s("p",[t._v("包括变量和函数在内的所有声明都会在任何代码被执行前首先处理。")]),t._v(" "),s("p",[t._v("函数声明会被提升但是函数表达式不会被提升。")]),t._v(" "),s("h3",{attrs:{id:"_4-3-函数优先"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-函数优先"}},[t._v("#")]),t._v(" 4.3 函数优先")]),t._v(" "),s("p",[t._v("函数声明和变量声明都会被提升。但是一个值得注意的细节（这个细节可以出现在有多个“"),s("strong",[t._v("重复")]),t._v("”声明的代码中）是函数会首先被提升，然后才是变量。")]),t._v(" "),s("h2",{attrs:{id:"第五章-作用域闭包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第五章-作用域闭包"}},[t._v("#")]),t._v(" 第五章 作用域闭包")]),t._v(" "),s("p",[t._v("无论通过何种方式将内部函数传递到所在的词法作用域以外，它都会持有对原始定义作用域的引用，无论在何处执行这个函数都会使用闭包。")]),t._v(" "),s("p",[t._v("如果一个函数在创建它的词法作用域之外执行，就会保持对当前词法作用域的引用，就会产生闭包。")]),t._v(" "),s("p",[t._v("本质上无论何时何地，如果将（访问它们各自词法作用域的）函数当做第一级的值类型到处传递，你就会看到闭包在这些函数中的应用。在定时器、事件监听器、Ajax请求、跨窗口通信、Web Workers或者任何其他的异步（或者同步）任务中，只要使用了回调函数，实际上就是在使用闭包。")]),t._v(" "),s("h4",{attrs:{id:"_5-5-1-现代的模块机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-1-现代的模块机制"}},[t._v("#")]),t._v(" 5.5.1 现代的模块机制")]),t._v(" "),s("p",[t._v("简单的模块化实现方案：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" MyModules "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Manager")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" modules "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("define")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" deps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" impl")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" deps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      deps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" modules"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("deps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    modules"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("impl")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("impl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" deps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" modules"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    define"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" define"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    get"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" get"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h1",{attrs:{id:"第二部分-this与原型对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二部分-this与原型对象"}},[t._v("#")]),t._v(" 第二部分 this与原型对象")]),t._v(" "),s("h2",{attrs:{id:"第一章-关于this"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一章-关于this"}},[t._v("#")]),t._v(" 第一章 关于this")]),t._v(" "),s("h3",{attrs:{id:"_1-1-为什么要使用this"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-为什么要使用this"}},[t._v("#")]),t._v(" 1.1 为什么要使用this")]),t._v(" "),s("p",[t._v("this提供了一种更优雅的方式来隐式“传递”一个对象的引用，因此可以将API设计得更加简洁并且易于复用。")]),t._v(" "),s("h3",{attrs:{id:"_1-2-误解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-误解"}},[t._v("#")]),t._v(" 1.2 误解")]),t._v(" "),s("h4",{attrs:{id:"_1-2-1-指向自身"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-指向自身"}},[t._v("#")]),t._v(" 1.2.1 指向自身")]),t._v(" "),s("h3",{attrs:{id:"_1-2-2-它的作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-它的作用域"}},[t._v("#")]),t._v(" 1.2.2 它的作用域")]),t._v(" "),s("p",[t._v("this在任何情况下都不指向函数的词法作用域")]),t._v(" "),s("h3",{attrs:{id:"_1-3-this到底是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-this到底是什么"}},[t._v("#")]),t._v(" 1.3 this到底是什么")]),t._v(" "),s("p",[s("strong",[t._v("this的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式。")]),s("br"),t._v("\n当一个函数被调用时，会创建一个活动记录（有时候也称为执行上下文）。这个记录会包含函数在哪里调用（调用栈）、函数的调用方式、传入的参数等信息。"),s("code",[t._v("this")]),t._v("就是这个记录的一个属性，会在函数的执行过程中用到。")]),t._v(" "),s("h2",{attrs:{id:"第二章-this全面解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二章-this全面解析"}},[t._v("#")]),t._v(" 第二章 this全面解析")]),t._v(" "),s("h3",{attrs:{id:"_2-1-调用位置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-调用位置"}},[t._v("#")]),t._v(" 2.1 调用位置")]),t._v(" "),s("h3",{attrs:{id:"_2-2-绑定规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-绑定规则"}},[t._v("#")]),t._v(" 2.2 绑定规则")]),t._v(" "),s("h4",{attrs:{id:"_2-2-1-默认绑定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-默认绑定"}},[t._v("#")]),t._v(" 2.2.1 默认绑定")]),t._v(" "),s("ol",[s("li",[t._v("全局函数调用时应用了"),s("code",[t._v("this")]),t._v("的"),s("strong",[t._v("默认绑定")]),t._v("，因此"),s("code",[t._v("this")]),t._v("指向全局对象；")]),t._v(" "),s("li",[t._v("如果使用严格模式（strict mode），则不能将全局对象用于默认绑定，因此"),s("code",[t._v("this")]),t._v("会绑定到"),s("code",[t._v("undefined")]),t._v("。")])]),t._v(" "),s("h4",{attrs:{id:"_2-2-2-隐式绑定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-隐式绑定"}},[t._v("#")]),t._v(" 2.2.2 隐式绑定")]),t._v(" "),s("p",[t._v("当函数有引用有上下文对象时，"),s("strong",[t._v("隐式绑定")]),t._v("规则会把函数调用中的"),s("code",[t._v("this")]),t._v("绑定到这个上下文对象。")]),t._v(" "),s("h5",{attrs:{id:"隐式丢失"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#隐式丢失"}},[t._v("#")]),t._v(" 隐式丢失")]),t._v(" "),s("p",[t._v("一个最常见的"),s("code",[t._v("this")]),t._v("绑定问题就是被隐式绑定的函数会丢失绑定对象，也就是说它会应用默认绑定，从而把"),s("code",[t._v("this")]),t._v("绑定到全局对象或者"),s("code",[t._v("undefined")]),t._v("上，取决于是否是严格模式。")]),t._v(" "),s("p",[t._v("这种问题常常出现在回调函数时，由于回调函数只会针对于函数本身，其实是一个不带任何修饰的函数调用英，因此应用了默认绑定。")]),t._v(" "),s("h4",{attrs:{id:"_2-2-3-显式绑定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-显式绑定"}},[t._v("#")]),t._v(" 2.2.3 显式绑定")]),t._v(" "),s("p",[t._v("主要通过"),s("code",[t._v("call")]),t._v("、"),s("code",[t._v("apply")]),t._v("方式给方法"),s("strong",[t._v("显式绑定")]),s("code",[t._v("this")]),t._v("，但是显式绑定任然无法解决之前丢失绑定的问题，主要是"),s("code",[t._v("call``apply")]),t._v("任然是一个函数同步调用，对于异步执行的函数没有办法对"),s("code",[t._v("this")]),t._v("做持久化存储。")]),t._v(" "),s("ol",[s("li",[t._v("硬绑定")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 简单的硬绑定polyfill")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("bind")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" args "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arguments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ctx "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("shift")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fn "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// es6")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("bind")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("ctx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("args")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fn "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("不难看出硬绑定就是通过闭包将当前的"),s("code",[t._v("this")]),t._v("保存下来，供函数异步调用使用。")]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("API调用的“上下文”"),s("br"),t._v("\nforEach() ???")])]),t._v(" "),s("h4",{attrs:{id:"_2-2-3-new绑定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-new绑定"}},[t._v("#")]),t._v(" 2.2.3 new绑定")]),t._v(" "),s("p",[t._v("使用"),s("code",[t._v("new")]),t._v("来调用foo(...)时，我们会构造一个新对象并把它绑定到foo(...)调用中的"),s("code",[t._v("this")]),t._v("上。"),s("code",[t._v("new")]),t._v("是最后一种可以影响函数调用时"),s("code",[t._v("this")]),t._v("绑定行为的方法，我们称之为"),s("code",[t._v("new")]),t._v("绑定。")]),t._v(" "),s("h3",{attrs:{id:"_2-3-优先级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-优先级"}},[t._v("#")]),t._v(" 2.3 优先级")]),t._v(" "),s("p",[t._v("new绑定 > 显式绑定 > 隐式绑定 > 默认绑定")]),t._v(" "),s("h3",{attrs:{id:"_2-4-绑定例外"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-绑定例外"}},[t._v("#")]),t._v(" 2.4 绑定例外")]),t._v(" "),s("h4",{attrs:{id:"_2-4-1-被忽略的this"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-1-被忽略的this"}},[t._v("#")]),t._v(" 2.4.1 被忽略的this")]),t._v(" "),s("p",[t._v("对于显式绑定是一个参数不必要的时候最好使用"),s("code",[t._v("Object.create(null)")]),t._v("这种空对象而不是使用"),s("code",[t._v("null")]),t._v("，倘若代码中真的有"),s("code",[t._v("this")]),t._v("访问，不存在的"),s("strong",[t._v("对象引用")]),t._v("不会产生问题，也不会对全局对象产生影响。如果使用"),s("code",[t._v("null")]),t._v("，会将"),s("code",[t._v("this")]),t._v("绑定到全局对象中，将会导致不可预计的后果（比如修改全局对象）。")]),t._v(" "),s("h4",{attrs:{id:"_2-4-2-间接引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-2-间接引用"}},[t._v("#")]),t._v(" 2.4.2 间接引用")]),t._v(" "),s("h4",{attrs:{id:"_2-4-3-软绑定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-3-软绑定"}},[t._v("#")]),t._v(" 2.4.3 软绑定")]),t._v(" "),s("h3",{attrs:{id:"_2-5-this词法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-this词法"}},[t._v("#")]),t._v(" 2.5 this词法")]),t._v(" "),s("p",[t._v("箭头函数的绑定无法修改")]),t._v(" "),s("h2",{attrs:{id:"第三章-对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第三章-对象"}},[t._v("#")]),t._v(" 第三章 对象")]),t._v(" "),s("h3",{attrs:{id:"_3-1-语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-语法"}},[t._v("#")]),t._v(" 3.1 语法")]),t._v(" "),s("p",[t._v("主要两种声明方式：")]),t._v(" "),s("ul",[s("li",[t._v("字面量")]),t._v(" "),s("li",[t._v("构造函数")])]),t._v(" "),s("h3",{attrs:{id:"_3-2-类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-类型"}},[t._v("#")]),t._v(" 3.2 类型")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("string")])]),t._v(" "),s("li",[s("code",[t._v("number")])]),t._v(" "),s("li",[s("code",[t._v("boolean")])]),t._v(" "),s("li",[s("code",[t._v("null")])]),t._v(" "),s("li",[s("code",[t._v("undefined")])]),t._v(" "),s("li",[s("code",[t._v("object")])]),t._v(" "),s("li",[s("code",[t._v("symbol")])])]),t._v(" "),s("h4",{attrs:{id:"内置对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内置对象"}},[t._v("#")]),t._v(" 内置对象")]),t._v(" "),s("h3",{attrs:{id:"_3-3-内容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-内容"}},[t._v("#")]),t._v(" 3.3 内容")]),t._v(" "),s("p",[t._v("需要强调的一点是，当我们说’内容‘时，似乎在暗示这些值实际上被存储在对象内部，但这只是它的表现形式。在引擎内部，这些值的存储方式是多种多样的，一般并不会存在容器对象内部。存储在对象容器内部的是这些属性的名称，它们就像指针（从技术角度来说就是引用）一样，指向这些值真正的存储位置。")]),t._v(" "),s("p",[t._v("对象属性两种访问方式：")]),t._v(" "),s("ol",[s("li",[t._v("属性访问 - "),s("code",[t._v(".key")])]),t._v(" "),s("li",[t._v("键访问 - "),s("code",[t._v("['key']")]),t._v("\n主要区别是"),s("code",[t._v(".")]),t._v("操作符要求属性名满足标识符的命名规范，而"),s("code",[t._v('[".."]')]),t._v("语法可以接受任意UTF-8/Unicode字符作为属性名。")])]),t._v(" "),s("h4",{attrs:{id:"_3-3-1-可计算属性名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-1-可计算属性名"}},[t._v("#")]),t._v(" 3.3.1 可计算属性名")]),t._v(" "),s("p",[t._v("ES6增加了可计算属性名，可以在文字形式中使用"),s("code",[t._v("[]")]),t._v("包裹一个表达式来当做属性名。")]),t._v(" "),s("h4",{attrs:{id:"_3-3-2-属性和方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-2-属性和方法"}},[t._v("#")]),t._v(" 3.3.2 属性和方法")]),t._v(" "),s("p",[t._v("属性访问返回的函数和其他函数没有任何区别（除了可能发生的隐式绑定"),s("code",[t._v("this")]),t._v("，就像我们刚才提到的）。")]),t._v(" "),s("h4",{attrs:{id:"_3-3-3-数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-3-数组"}},[t._v("#")]),t._v(" 3.3.3 数组")]),t._v(" "),s("p",[t._v("如果你试图向数组添加一个属性但是属性名’看起来‘像一个数字，那它会变成数组的数值下标（因此会修改数组的内容而不是添加一个属性）。")]),t._v(" "),s("h4",{attrs:{id:"_3-3-4-复制对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-4-复制对象"}},[t._v("#")]),t._v(" 3.3.4 复制对象")]),t._v(" "),s("p",[t._v("复制对象需要注意的一些地方：")]),t._v(" "),s("ol",[s("li",[t._v("循环引用问题")]),t._v(" "),s("li",[t._v("对于JSON安全（也就是说可以被序列化为一个JSON字符串并且可以根据这个字符串解析出一个结构完全一样的对象）的对象来说，有一个巧妙的复制方法：")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" newObj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("someObj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[t._v("ES6中的"),s("code",[t._v("Object.assign")]),t._v("方法可以遍历一个或多个源对象的所有可枚举属的自有键并把它们复制到目标对象，最后返回目标对象。")])]),t._v(" "),s("h4",{attrs:{id:"_3-3-5-属性描述符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-5-属性描述符"}},[t._v("#")]),t._v(" 3.3.5 属性描述符")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("Writable")]),t._v(" -- 决定是否可以修改属性的值")]),t._v(" "),s("li",[s("code",[t._v("Configurable")]),t._v(" -- 只要属性是可配置的，就可以使用defineProperty(...)方法来修改属性描述符\n"),s("ol",[s("li",[t._v("把"),s("code",[t._v("configurable")]),t._v("修改成"),s("code",[t._v("false")]),t._v("是单向操作，无法撤销；")]),t._v(" "),s("li",[t._v("除了无法修改，"),s("code",[t._v("configurable:false")]),t._v("还会禁止删除这个属性。")])])]),t._v(" "),s("li",[s("code",[t._v("Enumerable")]),t._v(" -- 这个描述符控制的是属性是否会出现在对象的属性枚举中")])]),t._v(" "),s("h4",{attrs:{id:"_3-3-6-不变性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-6-不变性"}},[t._v("#")]),t._v(" 3.3.6 不变性")]),t._v(" "),s("ol",[s("li",[t._v("对象常量\n结合"),s("code",[t._v("writable:false")]),t._v("和"),s("code",[t._v("configurable:false")]),t._v("就可以创建一个真正的常量属性（不可修改、重定义或者删除）")]),t._v(" "),s("li",[t._v("禁止扩展\n如果你想禁止一个对象添加新属性并且保留已有属性，可以使用"),s("code",[t._v("Object.preventExtensions(...)")])]),t._v(" "),s("li",[t._v("密封\n"),s("code",[t._v("Object.seal(...)")]),t._v("会创建一个“密封”的对象，这个方法实际上会在一个现有对象上调用"),s("code",[t._v("Object.preventExtensions(...)")]),t._v("并把所有现有属性标记为"),s("code",[t._v("configurable:false")]),t._v("。")]),t._v(" "),s("li",[t._v("冻结\n"),s("code",[t._v("Object.freeze(...)")]),t._v("会创建一个冻结对象，这个方法实际上会在一个现有对象上调用"),s("code",[t._v("Object.seal(...)")]),t._v("并把所有“数据访问”属性标记为"),s("code",[t._v("writable:false")]),t._v("，这样就无法修改他们的值。")])]),t._v(" "),s("h4",{attrs:{id:"_3-3-7-get"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-7-get"}},[t._v("#")]),t._v(" 3.3.7 [[Get]]")]),t._v(" "),s("ol",[s("li",[t._v("对象默认的内置"),s("code",[t._v("[[GET]]")]),t._v("操作首先在对象中查找是否有名称相同的属性，如果找到就会返回这个属性的值；")]),t._v(" "),s("li",[t._v("如果没有找到名称相同的属性，按照"),s("code",[t._v("[[GET]]")]),t._v("算法的定义会执行另外一种非常重要的行为（遍历原型链）；")]),t._v(" "),s("li",[t._v("如果无论如何都没有找到名称相同的属性，那"),s("code",[t._v("[[GET]]")]),t._v("操作会返回值"),s("code",[t._v("undefined")]),t._v("。")])]),t._v(" "),s("h4",{attrs:{id:"_3-3-8-put"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-8-put"}},[t._v("#")]),t._v(" 3.3.8 [[Put]]")]),t._v(" "),s("ol",[s("li",[t._v("属性是否是访问描述符？如果是并且存在"),s("code",[t._v("setter")]),t._v("就调用"),s("code",[t._v("setter")]),t._v("；")]),t._v(" "),s("li",[t._v("属性的数据描述符中"),s("code",[t._v("writable")]),t._v("是否是"),s("code",[t._v("false")]),t._v("？如果是，在非严格模式下静默失败，在严格模式下抛出"),s("code",[t._v("TypeError")]),t._v("异常；")]),t._v(" "),s("li",[t._v("如果都不是，将该值设置为属性的值。")])]),t._v(" "),s("h4",{attrs:{id:"_3-3-9-getter和setter"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-9-getter和setter"}},[t._v("#")]),t._v(" 3.3.9 Getter和Setter")]),t._v(" "),s("p",[t._v("当你给一个属性定义"),s("code",[t._v("getter")]),t._v("、"),s("code",[t._v("setter")]),t._v("或者两者都有时，这个属性会被定义为“访问描述符”（和“数据描述符”相对）。对于访问描述符来说，JavaScript会忽略他们的"),s("code",[t._v("value")]),t._v("和"),s("code",[t._v("writable")]),t._v("特性，取而代之的是关心set和get（还有"),s("code",[t._v("configurable")]),t._v("和"),s("code",[t._v("enumerable")]),t._v("）特性；")]),t._v(" "),s("h4",{attrs:{id:"_3-3-10-存在性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-10-存在性"}},[t._v("#")]),t._v(" 3.3.10 存在性")]),t._v(" "),s("p",[t._v("问题：如果"),s("code",[t._v("obj.a")]),t._v("属性访问值返回的是"),s("code",[t._v("undefined")]),t._v("，但这个值有可能是属性中存储的"),s("code",[t._v("undefined")]),t._v("，也有可能是因为属性不存在所以返回的"),s("code",[t._v("undefined")]),t._v("。如何区分这两种情况。")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("in")]),t._v("操作符会检查属性是否在对象及其"),s("code",[t._v("[[Prototype]]")]),t._v("原型链中，"),s("code",[t._v("hasOwnProperty(...)")]),t._v("会检查属性是否是自身属性；")]),t._v(" "),s("li",[t._v("对于对象自身及其原型上没有原型链上，没有"),s("code",[t._v("hasOwnProperty")]),t._v("方法的（"),s("code",[t._v("Object.create(null)")]),t._v("），可以使用"),s("code",[t._v("Object.prototype.hasOwnProperty.call(obj, 'a')")]),t._v("；")]),t._v(" "),s("li",[t._v("看起来新操作符可以检查容器内是否有某个值，但他实际上是检查某个属性名是否存在，这个对于数组要格外注意，例如"),s("code",[t._v("4 in [2, 4, 6] // false")]),t._v("，因为数组中的属性名是"),s("code",[t._v("0, 1, 2")]),t._v("；")]),t._v(" "),s("li",[s("code",[t._v("Object.prototypeIsEnumerable(...)")]),t._v("会检查给定的属性名是否直接存在于对象中（而不是在原型链上）并且满足"),s("code",[t._v("enumerable:true")]),t._v("；")]),t._v(" "),s("li",[s("code",[t._v("Object.keys(...)")]),t._v("会返回一个数组，包含所有可枚举属性；"),s("code",[t._v("Object.getOwnPropertyNames(...)")]),t._v("会返回一个数组，包含所有属性，无论是否可枚举。这两个方法都只会查找对象自身。")])]),t._v(" "),s("h3",{attrs:{id:"_3-4-遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-遍历"}},[t._v("#")]),t._v(" 3.4 遍历")]),t._v(" "),s("p",[t._v("主要是是关于for...of循环和Iterator接口的问题，后面专题细说。")]),t._v(" "),s("h2",{attrs:{id:"第四章-混合对象-类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第四章-混合对象-类"}},[t._v("#")]),t._v(' 第四章 混合对象"类"')]),t._v(" "),s("h3",{attrs:{id:"_4-1-类理论"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-类理论"}},[t._v("#")]),t._v(" 4.1 类理论")]),t._v(" "),s("p",[t._v("类/继承描述了一种代码的组织结构形式")]),t._v(" "),s("p",[t._v("面向对象编程强调的是数据和操作数据的行为本质上是互相关联的（当然，不同的数据有不同的行为），因此好的设计就是把数据以及和它相关的行为打包（或者说封装）起来。这在正式的计算机科学中有时被称为数据结构。")]),t._v(" "),s("h4",{attrs:{id:"_4-1-1-类-设计模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1-类-设计模式"}},[t._v("#")]),t._v(" 4.1.1 “类”设计模式")]),t._v(" "),s("h4",{attrs:{id:"_4-1-2-javascript中的-类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-2-javascript中的-类"}},[t._v("#")]),t._v(" 4.1.2 JavaScript中的“类”")]),t._v(" "),s("h3",{attrs:{id:"_4-2-类的机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-类的机制"}},[t._v("#")]),t._v(" 4.2 类的机制")]),t._v(" "),s("h4",{attrs:{id:"_4-2-1-建造"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-1-建造"}},[t._v("#")]),t._v(" 4.2.1 建造")]),t._v(" "),s("p",[t._v("类通过复制操作被实例化为对象形式")]),t._v(" "),s("h4",{attrs:{id:"_4-2-2-构造函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-2-构造函数"}},[t._v("#")]),t._v(" 4.2.2 构造函数")]),t._v(" "),s("p",[t._v("类实例是由一个特殊的类方法构造的，这个方法名通常和类名相同，被称为构造函数，通过"),s("code",[t._v("new")]),t._v("调用产生一个实例。")]),t._v(" "),s("h3",{attrs:{id:"_4-3-类的继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-类的继承"}},[t._v("#")]),t._v(" 4.3 类的继承")]),t._v(" "),s("p",[t._v("在面向对象的语言中，你可以先定义一个类，然后定义一个继承前者的类。")]),t._v(" "),s("h4",{attrs:{id:"_4-3-1-多态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-1-多态"}},[t._v("#")]),t._v(" 4.3.1 多态")]),t._v(" "),s("p",[t._v("多态是一个非常广泛的话题，我们现在所说的“相对”只是多态的一个方面：任何方法都可以引用继承中高层的方法（无论高层的方法名和当前方法名是否相同）。"),s("br"),t._v("\n多态的另一方面是，在继承链的不同层次中一个方法名可以被多次定义，当调用方法时会自动选择合适的定义。")]),t._v(" "),s("h4",{attrs:{id:"_4-3-2-多重继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-2-多重继承"}},[t._v("#")]),t._v(" 4.3.2 多重继承")]),t._v(" "),s("h3",{attrs:{id:"_4-4-混入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-混入"}},[t._v("#")]),t._v(" 4.4 混入")]),t._v(" "),s("h4",{attrs:{id:"_4-4-1-显式混入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-1-显式混入"}},[t._v("#")]),t._v(" 4.4.1 显式混入")]),t._v(" "),s("h4",{attrs:{id:"_4-4-2-隐式混入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-2-隐式混入"}},[t._v("#")]),t._v(" 4.4.2 隐式混入")]),t._v(" "),s("p",[s("strong",[t._v("总的来说，这章质量不高，总结的维度深入也不够，感觉是作者并不认同在JavaScript中模拟类这种做法。")])]),t._v(" "),s("h2",{attrs:{id:"第五章-原型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第五章-原型"}},[t._v("#")]),t._v(" 第五章 原型")]),t._v(" "),s("h3",{attrs:{id:"_5-1-prototype"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-prototype"}},[t._v("#")]),t._v(" 5.1 [[Prototype]]")]),t._v(" "),s("p",[t._v("JavaScript中的对象有一个\b特殊的[[Prototype]]内置属性，其实就是对于其他对象的引用。")]),t._v(" "),s("ol",[s("li",[t._v("[[Get]]操作会查找原型链；")]),t._v(" "),s("li",[t._v("in操作符会查找原型链（可枚举）")])]),t._v(" "),s("h3",{attrs:{id:"_5-1-1-object-prototype"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-1-object-prototype"}},[t._v("#")]),t._v(" 5.1.1 Object.prototype")]),t._v(" "),s("p",[t._v("\b所有的"),s("strong",[t._v("普通")]),t._v("的[[Prototype]]链最终都会指向内置的Object.prototype。")]),t._v(" "),s("p",[t._v("先复习一下Object对象原型方法")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Google Chrome(version 74.0.3729.169)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  constructor"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ƒ Object()'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  hasOwnProperty"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ƒ hasOwnProperty()'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  isPrototypeOf"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ƒ isPrototypeOf()'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  propertyIsEnumerable"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ƒ propertyIsEnumerable()'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  toLocaleString"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ƒ toLocaleString()'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  toString"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ƒ toString()'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  valueOf"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ƒ valueOf()'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  __defineGetter__"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ƒ __defineGetter__()'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  __defineSetter__"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ƒ __defineSetter__()'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  __lookupGetter__"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ƒ __lookupGetter__()'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  __lookupSetter__"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ƒ __lookupSetter__()'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),t._v(" __proto__"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ƒ __proto__()'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" __proto__"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ƒ __proto__()'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"_5-1-2-属性设置和屏蔽"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-2-属性设置和屏蔽"}},[t._v("#")]),t._v(" 5.1.2 \b属性设置\b和屏蔽")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("myObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bar'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("如果给一个对象设置属性，如果该属性不存在于对象本身，那么就会去遍历[[\b\bPrototype]]链，如果既存在于自身又存在于[[\b\bPrototype]]链上，那么就会产生屏蔽现象。")]),t._v(" "),s("p",[t._v("屏蔽的三种情况：")]),t._v(" "),s("ol",[s("li",[t._v("如果在[[Prototype]]链上层存在名为foo的普通数据访问类型并且没有被标记为只读，那就会直接在myObject对象中添加一个名为foo的新属性，它是屏蔽属性；")]),t._v(" "),s("li",[t._v("\b如果在[[Prototype]]链上层存在foo，但是它被标记为只读，那么无法修改已有属性或者在myObject上创建屏蔽属性。如果在严格模式下，代码会抛出一个错误。否则，这条赋值语句会被忽略。总之，不会发生屏蔽。")]),t._v(" "),s("li",[t._v("如果在[[Prototype]]链上存在foo并且它是一个setter，那就一定会调用这个\nsetter。foo不会被添加到myObject，也不会重新定义foo这个setter。")])]),t._v(" "),s("p",[t._v("如果你希望第二第三种情况下也屏蔽foo，那就不能使用=操作符来赋值，而是使用Object.defineProperty(...)来向myObejct添加foo。")]),t._v(" "),s("p",[t._v("一些情况下会出现隐式屏蔽，比方说：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("myObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n")])])]),s("h3",{attrs:{id:"_5-2-类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-类"}},[t._v("#")]),t._v(" 5.2 “类”")]),t._v(" "),s("h4",{attrs:{id:"_5-2-1-类-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-1-类-函数"}},[t._v("#")]),t._v(" 5.2.1 “类”函数")]),t._v(" "),s("p",[t._v("“模拟类”的行为利用了函数的\b一种特殊特性：所有的函数默认都会拥有一个名为prototype的公有并且不可枚举的属性，它会指向另一个对象。通过用new操作符实例化后的每个对象将最终被[[Prototype]]链接到这个“Foo.prototype”对象。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" foo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPrototypeOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),s("p",[t._v("在面向对象语言中，\b类可以被复制（或者说实例化）多次，就像模具制作东西一样。但是在JavaScript中，并没有蕾丝的复制机制。你不能创建一个类的多个实例，只能创建多个对象，他们的[[Prototype]]关联的是同一个对象。但是在默认情况下并不会进行复制，因此这些对象之间并不会完全失去联系，\b他们是互相关联的。")]),t._v(" "),s("p",[s("strong",[t._v("委托")]),t._v("这个术语可以更加准确的描述JavaScript中对象的关联机制。")]),t._v(" "),s("p",[t._v("还有个偶尔会用到的JavaScript术语叫差异继承。如果你把JavaScript中对象的所有委托行为都归结到对象本身并且把对象看作是实物的话，那就（差不多）可以理解差异继承了。")]),t._v(" "),s("p",[t._v("但是和原型继承一样，差异继承会更多是你脑中构建出的模型，而非真实情况。它忽略了一个事实，那就是对象B实际上并不是被差异构造出来的，我们只是定义了B的一些指定特性，其他没有定义的东西都变成了“洞”。而这些洞（或者说缺少定义的空白处）最终会被委托行为“填满”。")]),t._v(" "),s("h4",{attrs:{id:"_5-2-2-构造函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-2-构造函数"}},[t._v("#")]),t._v(" 5.2.2 “构造函数”")])])}),[],!1,null,null,null);a.default=r.exports}}]);