(window.webpackJsonp=window.webpackJsonp||[]).push([[151],{506:function(n,e,t){"use strict";t.r(e);var a=t(42),s=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"git标准化实践"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git标准化实践"}},[n._v("#")]),n._v(" Git标准化实践")]),n._v(" "),t("h2",{attrs:{id:"commit-message-格式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#commit-message-格式"}},[n._v("#")]),n._v(" Commit message 格式")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("<type>(<scope>): <subject>\n// 注意冒号 : 后有空格\n// 如 feat(miniprogram): 增加了小程序模板消息相关功能\n")])])]),t("p",[n._v("cope选填表示commit的作用范围，如数据层、视图层，也可以是目录名称\nsubject必填用于对commit进行简短的描述\ntype必填表示提交类型，值有以下几种：")]),n._v(" "),t("ul",[t("li",[n._v("feat - 新功能 feature")]),n._v(" "),t("li",[n._v("fix - 修复 bug")]),n._v(" "),t("li",[n._v("docs - 文档注释")]),n._v(" "),t("li",[n._v("style - 代码格式(不影响代码运行的变动)")]),n._v(" "),t("li",[n._v("refactor - 重构、优化(既不增加新功能，也不是修复bug)")]),n._v(" "),t("li",[n._v("perf - 性能优化")]),n._v(" "),t("li",[n._v("test - 增加测试")]),n._v(" "),t("li",[n._v("chore - 构建过程或辅助工具的变动")]),n._v(" "),t("li",[n._v("revert - 回退")]),n._v(" "),t("li",[n._v("build - 打包")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// commitlint\n// 项目目录下安装\nnpm i commitlint --save-dev\nnpm i @commitlint/config-conventional --save-dev\n\ntouch commitlint.config.js\n\n// commitlint.config.js\nmodule.exports = {\n  extends: ['@commitlint/config-conventional'],\n  rules: {\n    // type 类型定义\n    'type-enum': [2, 'always', [\n      \"feat\", // 新功能 feature\n      \"fix\", // 修复 bug\n      \"docs\", // 文档注释\n      \"style\", // 代码格式(不影响代码运行的变动)\n      \"refactor\", // 重构(既不增加新功能，也不是修复bug)\n      \"perf\", // 性能优化\n      \"test\", // 增加测试\n      \"chore\", // 构建过程或辅助工具的变动\n      \"revert\", // 回退\n      \"build\" // 打包\n    ]],\n    // subject 大小写不做校验\n    // 自动部署的BUILD ROBOT的commit信息大写，以作区别\n    'subject-case': [0]\n  }\n};\n\n\n// husky\n// 项目目录下安装\nnpm i husky --save-dev\n// 在package.json文件中增加相关配置\n\"husky\": {\n  \"hooks\": {\n    \"commit-msg\": \"commitlint -E HUSKY_GIT_PARAMS\"\n  }\n}\n\n// commitizen\n// 全局安装\nnpm i commitizen -g\n// 项目目录下安装\nnpm i commitizen --save-dev\ncommitizen init cz-customizable --save-dev --save-exact\n\n// 此时package.json文件中会自动增加以下配置\n// 但注意这里的path可能要根据实际情况进行修改，如nAdmin项目\n\"config\": {\n  \"commitizen\": {\n    \"path\": \"./node_modules/cz-customizable\"\n  }\n}\n\ntouch .cz-config.js\n\n// .cz-config.js\n'use strict';\n\nmodule.exports = {\n  types: [\n    {value: 'feat',     name: 'feat:     新功能'},\n    {value: 'fix',      name: 'fix:      修复'},\n    {value: 'docs',     name: 'docs:     文档变更'},\n    {value: 'style',    name: 'style:    代码格式(不影响代码运行的变动)'},\n    {value: 'refactor', name: 'refactor: 重构(既不是增加feature，也不是修复bug)'},\n    {value: 'perf',     name: 'perf:     性能优化'},\n    {value: 'test',     name: 'test:     增加测试'},\n    {value: 'chore',    name: 'chore:    构建过程或辅助工具的变动'},\n    {value: 'revert',   name: 'revert:   回退'},\n    {value: 'build',    name: 'build:    打包'}\n  ],\n  // override the messages, defaults are as follows\n  messages: {\n    type: '请选择提交类型:',\n    // scope: '请输入文件修改范围(可选):',\n    // used if allowCustomScopes is true\n    customScope: '请输入修改范围(可选):',\n    subject: '请简要描述提交(必填):',\n    body: '请输入详细描述(可选，待优化去除，跳过即可):',\n    // breaking: 'List any BREAKING CHANGES (optional):\\n',\n    footer: '请输入要关闭的issue(待优化去除，跳过即可):',\n    confirmCommit: '确认使用以上信息提交？(y/n/e/h)'\n  },\n  allowCustomScopes: true,\n  // allowBreakingChanges: ['feat', 'fix'],\n  skipQuestions: ['body', 'footer'],\n  // limit subject length, commitlint默认是72\n  subjectLimit: 72\n};\n\n\n")])])]),t("h2",{attrs:{id:"自动生成change-log"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自动生成change-log"}},[n._v("#")]),n._v(" 自动生成Change log")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 安装\nnpm i conventional-changelog-cli --save-dev\nnpm i conventional-changelog-config --save-dev\n\ntouch changelog.config.js\n\n// changelog.config.js\n'use strict';\n\nmodule.exports = {\n  link: {\n    host: 'http://gitlab.dealmoon.net',\n    owner: 'frontend',\n    repository: 'web_us_nAdmin' // 对应的仓库\n  },\n  typeTitle: {\n    feat: 'Features',\n    fix: 'Bug Fixes',\n    perf: 'Performance Improvements',\n    revert: 'Reverts',\n    docs: 'Documentation',\n    style: 'Styles',\n    refactor: 'Code Refactoring',\n    test: 'Tests',\n    chore: 'Chores'\n  },\n  commitHashLength: 7\n};\n\n\n// 在package.json中加入配置方便使用\n\"scripts\": {\n  // 让changelog使用我们自己的config库\n  \"changelog\": \"conventional-changelog -p config -i CHANGELOG.md -s\"\n  // \"changelog\": \"conventional-changelog -p angular -i CHANGELOG.md -s\"\n}\n// 项目目录下生成 CHANGELOG.md 文件\nnpm run changelog\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);