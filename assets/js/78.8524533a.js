(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{433:function(r,t,a){"use strict";a.r(t);var e=a(42),o=Object(e.a)({},(function(){var r=this,t=r.$createElement,a=r._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[a("h1",{attrs:{id:"array"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array"}},[r._v("#")]),r._v(" 🤔Array")]),r._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#静态属性"}},[r._v("静态属性")]),a("ul",[a("li",[a("a",{attrs:{href:"#array-length"}},[r._v("Array.length")])]),a("li",[a("a",{attrs:{href:"#get-array-species"}},[r._v("get Array[@@species]")])]),a("li",[a("a",{attrs:{href:"#array-prototype"}},[r._v("Array.prototype")])]),a("li",[a("a",{attrs:{href:"#array-from"}},[r._v("Array.from()")])]),a("li",[a("a",{attrs:{href:"#array-isarray"}},[r._v("Array.isArray()")])]),a("li",[a("a",{attrs:{href:"#array-of"}},[r._v("Array.of()")])])])]),a("li",[a("a",{attrs:{href:"#实例属性"}},[r._v("实例属性")]),a("ul",[a("li",[a("a",{attrs:{href:"#array-prototype-constructor"}},[r._v("Array.prototype.constructor")])]),a("li",[a("a",{attrs:{href:"#array-prototype-length"}},[r._v("Array.prototype.length")])])])]),a("li",[a("a",{attrs:{href:"#修改器实例方法"}},[r._v("修改器实例方法")]),a("ul",[a("li",[a("a",{attrs:{href:"#array-prototype-copywithin"}},[r._v("Array.prototype.copyWithin()")])]),a("li",[a("a",{attrs:{href:"#array-prototype-fill"}},[r._v("Array.prototype.fill()")])]),a("li",[a("a",{attrs:{href:"#array-prototype-pop"}},[r._v("Array.prototype.pop()")])]),a("li",[a("a",{attrs:{href:"#array-prototype-push"}},[r._v("Array.prototype.push()")])]),a("li",[a("a",{attrs:{href:"#array-prototype-reverse"}},[r._v("Array.prototype.reverse()")])]),a("li",[a("a",{attrs:{href:"#array-prototype-shift"}},[r._v("Array.prototype.shift()")])]),a("li",[a("a",{attrs:{href:"#array-prototype-sort"}},[r._v("Array.prototype.sort()")])]),a("li",[a("a",{attrs:{href:"#array-prototype-splice"}},[r._v("Array.prototype.splice()")])]),a("li",[a("a",{attrs:{href:"#array-prototype-unshift"}},[r._v("Array.prototype.unshift()")])])])]),a("li",[a("a",{attrs:{href:"#访问实例方法"}},[r._v("访问实例方法")]),a("ul",[a("li",[a("a",{attrs:{href:"#array-prototype-concat"}},[r._v("Array.prototype.concat()")])]),a("li",[a("a",{attrs:{href:"#array-prototype-includes"}},[r._v("Array.prototype.includes()")])]),a("li",[a("a",{attrs:{href:"#array-prototype-join"}},[r._v("Array.prototype.join()")])]),a("li",[a("a",{attrs:{href:"#array-prototype-slice"}},[r._v("Array.prototype.slice()")])]),a("li",[a("a",{attrs:{href:"#array-prototype-tosource"}},[r._v("Array.prototype.toSource()")])]),a("li",[a("a",{attrs:{href:"#array-prototype-tostring"}},[r._v("Array.prototype.toString()")])]),a("li",[a("a",{attrs:{href:"#array-prototype-tolocalestring"}},[r._v("Array.prototype.toLocaleString()")])]),a("li",[a("a",{attrs:{href:"#array-prototype-indexof"}},[r._v("Array.prototype.indexOf()")])]),a("li",[a("a",{attrs:{href:"#array-prototype-lastindexof"}},[r._v("Array.prototype.lastIndexOf()")])])])]),a("li",[a("a",{attrs:{href:"#迭代方法"}},[r._v("迭代方法")]),a("ul",[a("li",[a("a",{attrs:{href:"#array-prototype-foreach"}},[r._v("Array.prototype.forEach()")])]),a("li",[a("a",{attrs:{href:"#array-prototype-entries"}},[r._v("Array.prototype.entries()")])]),a("li",[a("a",{attrs:{href:"#array-prototype-every"}},[r._v("Array.prototype.every()")])]),a("li",[a("a",{attrs:{href:"#array-prototype-some"}},[r._v("Array.prototype.some()")])]),a("li",[a("a",{attrs:{href:"#array-prototype-filter"}},[r._v("Array.prototype.filter()")])]),a("li",[a("a",{attrs:{href:"#array-prototype-find"}},[r._v("Array.prototype.find()")])]),a("li",[a("a",{attrs:{href:"#array-prototype-findindex"}},[r._v("Array.prototype.findIndex()")])]),a("li",[a("a",{attrs:{href:"#array-prototype-keys"}},[r._v("Array.prototype.keys()")])]),a("li",[a("a",{attrs:{href:"#array-prototype-map"}},[r._v("Array.prototype.map()")])]),a("li",[a("a",{attrs:{href:"#array-prototype-reduce"}},[r._v("Array.prototype.reduce()")])]),a("li",[a("a",{attrs:{href:"#array-prototype-reduceright"}},[r._v("Array.prototype.reduceRight()")])]),a("li",[a("a",{attrs:{href:"#array-prototype-values"}},[r._v("Array.prototype.values()")])]),a("li",[a("a",{attrs:{href:"#array-prototype-iterator"}},[r._v("Array.prototype[@@iterator]()")])])])])])]),a("p"),r._v(" "),a("h2",{attrs:{id:"静态属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态属性"}},[r._v("#")]),r._v(" 静态属性")]),r._v(" "),a("h3",{attrs:{id:"array-length"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-length"}},[r._v("#")]),r._v(" "),a("code",[r._v("Array.length")])]),r._v(" "),a("p",[r._v("Array 构造函数的 length 属性，其值为1（注意该属性为静态属性，不是数组实例的 length 属性）。")]),r._v(" "),a("h3",{attrs:{id:"get-array-species"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-array-species"}},[r._v("#")]),r._v(" "),a("code",[r._v("get Array[@@species]")])]),r._v(" "),a("p",[r._v("返回 Array 构造函数。")]),r._v(" "),a("h3",{attrs:{id:"array-prototype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype"}},[r._v("#")]),r._v(" Array.prototype")]),r._v(" "),a("p",[r._v("通过数组的原型对象可以为所有数组对象添加属性。")]),r._v(" "),a("h1",{attrs:{id:"静态方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态方法"}},[r._v("#")]),r._v(" 静态方法")]),r._v(" "),a("h3",{attrs:{id:"array-from"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-from"}},[r._v("#")]),r._v(" "),a("code",[r._v("Array.from()")])]),r._v(" "),a("p",[r._v("从类数组对象或者可迭代对象中创建一个新的数组实例。")]),r._v(" "),a("h3",{attrs:{id:"array-isarray"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-isarray"}},[r._v("#")]),r._v(" "),a("code",[r._v("Array.isArray()")])]),r._v(" "),a("p",[r._v("用来判断某个变量是否是一个数组对象。")]),r._v(" "),a("h3",{attrs:{id:"array-of"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-of"}},[r._v("#")]),r._v(" "),a("code",[r._v("Array.of()")])]),r._v(" "),a("p",[r._v("根据一组参数来创建新的数组实例，支持任意的参数数量和类型。")]),r._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[r._v("Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[r._v("of")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[r._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v(";")]),r._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[r._v("// [7]")]),r._v("\nArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[r._v("of")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[r._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v(",")]),r._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[r._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v(",")]),r._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[r._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v(";")]),r._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[r._v("// [1, 2, 3]")]),r._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[r._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[r._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v(";")]),r._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[r._v("// [ , , , , , , ]")]),r._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[r._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[r._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v(",")]),r._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[r._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v(",")]),r._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[r._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v(";")]),r._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[r._v("// [1, 2, 3]")]),r._v("\n")])])]),a("h2",{attrs:{id:"实例属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例属性"}},[r._v("#")]),r._v(" 实例属性")]),r._v(" "),a("h3",{attrs:{id:"array-prototype-constructor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-constructor"}},[r._v("#")]),r._v(" "),a("code",[r._v("Array.prototype.constructor")])]),r._v(" "),a("p",[r._v("所有的数组实例都继承了这个属性，它的值就是 Array，表明了所有的数组都是由 Array 构造出来的。")]),r._v(" "),a("h3",{attrs:{id:"array-prototype-length"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-length"}},[r._v("#")]),r._v(" "),a("code",[r._v("Array.prototype.length")])]),r._v(" "),a("p",[r._v("上面说了，因为 Array.prototype 也是个数组，所以它也有 length 属性，这个值为 0，因为它是个空数组。")]),r._v(" "),a("h2",{attrs:{id:"修改器实例方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改器实例方法"}},[r._v("#")]),r._v(" 修改器实例方法")]),r._v(" "),a("p",[r._v("下面的这些方法会改变调用它们的对象自身的值：")]),r._v(" "),a("h3",{attrs:{id:"array-prototype-copywithin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-copywithin"}},[r._v("#")]),r._v(" "),a("code",[r._v("Array.prototype.copyWithin()")])]),r._v(" "),a("p",[r._v("在数组内部，将一段元素序列拷贝到另一段元素序列上，覆盖原有的值。")]),r._v(" "),a("h3",{attrs:{id:"array-prototype-fill"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-fill"}},[r._v("#")]),r._v(" "),a("code",[r._v("Array.prototype.fill()")])]),r._v(" "),a("p",[r._v("将数组中指定区间的所有元素的值，都替换成某个固定的值。")]),r._v(" "),a("h3",{attrs:{id:"array-prototype-pop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-pop"}},[r._v("#")]),r._v(" "),a("code",[r._v("Array.prototype.pop()")])]),r._v(" "),a("p",[r._v("删除数组的最后一个元素，并返回这个元素。")]),r._v(" "),a("h3",{attrs:{id:"array-prototype-push"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-push"}},[r._v("#")]),r._v(" "),a("code",[r._v("Array.prototype.push()")])]),r._v(" "),a("p",[r._v("在数组的末尾增加一个或多个元素，并返回数组的新长度。")]),r._v(" "),a("h3",{attrs:{id:"array-prototype-reverse"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-reverse"}},[r._v("#")]),r._v(" "),a("code",[r._v("Array.prototype.reverse()")])]),r._v(" "),a("p",[r._v("颠倒数组中元素的排列顺序，即原先的第一个变为最后一个，原先的最后一个变为第一个。")]),r._v(" "),a("h3",{attrs:{id:"array-prototype-shift"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-shift"}},[r._v("#")]),r._v(" "),a("code",[r._v("Array.prototype.shift()")])]),r._v(" "),a("p",[r._v("删除数组的第一个元素，并返回这个元素。")]),r._v(" "),a("h3",{attrs:{id:"array-prototype-sort"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-sort"}},[r._v("#")]),r._v(" "),a("code",[r._v("Array.prototype.sort()")])]),r._v(" "),a("p",[r._v("对数组元素进行排序，并返回当前数组。")]),r._v(" "),a("h3",{attrs:{id:"array-prototype-splice"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-splice"}},[r._v("#")]),r._v(" "),a("code",[r._v("Array.prototype.splice()")])]),r._v(" "),a("p",[r._v("在任意的位置给数组添加或删除任意个元素。")]),r._v(" "),a("h3",{attrs:{id:"array-prototype-unshift"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-unshift"}},[r._v("#")]),r._v(" "),a("code",[r._v("Array.prototype.unshift()")])]),r._v(" "),a("p",[r._v("在数组的开头增加一个或多个元素，并返回数组的新长度。")]),r._v(" "),a("h2",{attrs:{id:"访问实例方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#访问实例方法"}},[r._v("#")]),r._v(" 访问实例方法")]),r._v(" "),a("p",[r._v("下面的这些方法绝对不会改变调用它们的对象的值，只会返回一个新的数组或者返回一个其它的期望值。")]),r._v(" "),a("h3",{attrs:{id:"array-prototype-concat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-concat"}},[r._v("#")]),r._v(" "),a("code",[r._v("Array.prototype.concat()")])]),r._v(" "),a("p",[r._v("返回一个由当前数组和其它若干个数组或者若干个非数组值组合而成的新数组。")]),r._v(" "),a("h3",{attrs:{id:"array-prototype-includes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-includes"}},[r._v("#")]),r._v(" "),a("code",[r._v("Array.prototype.includes()")])]),r._v(" "),a("p",[r._v("判断当前数组是否包含某指定的值，如果是返回 true，否则返回 false。")]),r._v(" "),a("h3",{attrs:{id:"array-prototype-join"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-join"}},[r._v("#")]),r._v(" "),a("code",[r._v("Array.prototype.join()")])]),r._v(" "),a("p",[r._v("连接所有数组元素组成一个字符串。")]),r._v(" "),a("h3",{attrs:{id:"array-prototype-slice"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-slice"}},[r._v("#")]),r._v(" "),a("code",[r._v("Array.prototype.slice()")])]),r._v(" "),a("p",[r._v("抽取当前数组中的一段元素组合成一个新数组。")]),r._v(" "),a("h3",{attrs:{id:"array-prototype-tosource"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-tosource"}},[r._v("#")]),r._v(" "),a("code",[r._v("Array.prototype.toSource()")])]),r._v(" "),a("p",[r._v("返回一个表示当前数组字面量的字符串。遮蔽了原型链上的 Object.prototype.toSource() 方法。")]),r._v(" "),a("h3",{attrs:{id:"array-prototype-tostring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-tostring"}},[r._v("#")]),r._v(" "),a("code",[r._v("Array.prototype.toString()")])]),r._v(" "),a("p",[r._v("返回一个由所有数组元素组合而成的字符串。遮蔽了原型链上的 Object.prototype.toString() 方法。")]),r._v(" "),a("h3",{attrs:{id:"array-prototype-tolocalestring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-tolocalestring"}},[r._v("#")]),r._v(" "),a("code",[r._v("Array.prototype.toLocaleString()")])]),r._v(" "),a("p",[r._v("返回一个由所有数组元素组合而成的本地化后的字符串。遮蔽了原型链上的 Object.prototype.toLocaleString() 方法。")]),r._v(" "),a("h3",{attrs:{id:"array-prototype-indexof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-indexof"}},[r._v("#")]),r._v(" "),a("code",[r._v("Array.prototype.indexOf()")])]),r._v(" "),a("p",[r._v("返回数组中第一个与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。")]),r._v(" "),a("h3",{attrs:{id:"array-prototype-lastindexof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-lastindexof"}},[r._v("#")]),r._v(" "),a("code",[r._v("Array.prototype.lastIndexOf()")])]),r._v(" "),a("p",[r._v("返回数组中最后一个（从右边数第一个）与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。")]),r._v(" "),a("h2",{attrs:{id:"迭代方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迭代方法"}},[r._v("#")]),r._v(" 迭代方法")]),r._v(" "),a("p",[r._v("在下面的众多遍历方法中，有很多方法都需要指定一个回调函数作为参数。在每一个数组元素都分别执行完回调函数之前，数组的length属性会被缓存在某个地方，所以，如果你在回调函数中为当前数组添加了新的元素，那么那些新添加的元素是不会被遍历到的。此外，如果在回调函数中对当前数组进行了其它修改，比如改变某个元素的值或者删掉某个元素，那么随后的遍历操作可能会受到未预期的影响。总之，不要尝试在遍历过程中对原数组进行任何修改，虽然规范对这样的操作进行了详细的定义，但为了可读性和可维护性，请不要这样做。")]),r._v(" "),a("h3",{attrs:{id:"array-prototype-foreach"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-foreach"}},[r._v("#")]),r._v(" "),a("code",[r._v("Array.prototype.forEach()")])]),r._v(" "),a("p",[r._v("为数组中的每个元素执行一次回调函数。")]),r._v(" "),a("h3",{attrs:{id:"array-prototype-entries"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-entries"}},[r._v("#")]),r._v(" "),a("code",[r._v("Array.prototype.entries()")])]),r._v(" "),a("p",[r._v("返回一个数组迭代器对象，该迭代器会包含所有数组元素的键值对。")]),r._v(" "),a("h3",{attrs:{id:"array-prototype-every"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-every"}},[r._v("#")]),r._v(" "),a("code",[r._v("Array.prototype.every()")])]),r._v(" "),a("p",[r._v("如果数组中的每个元素都满足测试函数，则返回 true，否则返回 false。")]),r._v(" "),a("h3",{attrs:{id:"array-prototype-some"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-some"}},[r._v("#")]),r._v(" "),a("code",[r._v("Array.prototype.some()")])]),r._v(" "),a("p",[r._v("如果数组中至少有一个元素满足测试函数，则返回 true，否则返回 false。")]),r._v(" "),a("h3",{attrs:{id:"array-prototype-filter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-filter"}},[r._v("#")]),r._v(" "),a("code",[r._v("Array.prototype.filter()")])]),r._v(" "),a("p",[r._v("将所有在过滤函数中返回 true 的数组元素放进一个新数组中并返回。")]),r._v(" "),a("h3",{attrs:{id:"array-prototype-find"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-find"}},[r._v("#")]),r._v(" "),a("code",[r._v("Array.prototype.find()")])]),r._v(" "),a("p",[r._v("找到第一个满足测试函数的元素并返回那个元素的值，如果找不到，则返回 undefined。")]),r._v(" "),a("h3",{attrs:{id:"array-prototype-findindex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-findindex"}},[r._v("#")]),r._v(" "),a("code",[r._v("Array.prototype.findIndex()")])]),r._v(" "),a("p",[r._v("找到第一个满足测试函数的元素并返回那个元素的索引，如果找不到，则返回 -1。")]),r._v(" "),a("h3",{attrs:{id:"array-prototype-keys"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-keys"}},[r._v("#")]),r._v(" "),a("code",[r._v("Array.prototype.keys()")])]),r._v(" "),a("p",[r._v("返回一个数组迭代器对象，该迭代器会包含所有数组元素的键。")]),r._v(" "),a("h3",{attrs:{id:"array-prototype-map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-map"}},[r._v("#")]),r._v(" "),a("code",[r._v("Array.prototype.map()")])]),r._v(" "),a("p",[r._v("返回一个由回调函数的返回值组成的新数组。")]),r._v(" "),a("h3",{attrs:{id:"array-prototype-reduce"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-reduce"}},[r._v("#")]),r._v(" "),a("code",[r._v("Array.prototype.reduce()")])]),r._v(" "),a("p",[r._v("从左到右为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值。")]),r._v(" "),a("h3",{attrs:{id:"array-prototype-reduceright"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-reduceright"}},[r._v("#")]),r._v(" "),a("code",[r._v("Array.prototype.reduceRight()")])]),r._v(" "),a("p",[r._v("从右到左为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值。")]),r._v(" "),a("h3",{attrs:{id:"array-prototype-values"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-values"}},[r._v("#")]),r._v(" "),a("code",[r._v("Array.prototype.values()")])]),r._v(" "),a("p",[r._v("返回一个数组迭代器对象，该迭代器会包含所有数组元素的值。")]),r._v(" "),a("h3",{attrs:{id:"array-prototype-iterator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-iterator"}},[r._v("#")]),r._v(" "),a("code",[r._v("Array.prototype[@@iterator]()")])]),r._v(" "),a("p",[r._v("和上面的 values() 方法是同一个函数。")])])}),[],!1,null,null,null);t.default=o.exports}}]);