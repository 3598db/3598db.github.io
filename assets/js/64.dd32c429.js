(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{419:function(e,t,s){"use strict";s.r(t);var n=s(42),a=Object(n.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"cjs、amd、cmd与esm对比"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cjs、amd、cmd与esm对比"}},[e._v("#")]),e._v(" CJS、AMD、CMD与ESM对比")]),e._v(" "),s("h2",{attrs:{id:"amd-vs-cmd"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#amd-vs-cmd"}},[e._v("#")]),e._v(" AMD vs. CMD")]),e._v(" "),s("p",[e._v("AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。"),s("br"),e._v("\nCMD 是 SeaJS 在推广过程中对模块定义的规范化产出。"),s("br"),e._v("\n类似的还有 CommonJS Modules/2.0 规范，是 BravoJS 在推广过程中对模块定义的规范化产出。")]),e._v(" "),s("p",[e._v("这些规范的目的都是为了 JavaScript 的模块化开发，特别是在浏览器端的。"),s("br"),e._v("\n目前这些规范的实现都能达成浏览器端模块化开发的目的。")]),e._v(" "),s("p",[e._v("区别：")]),e._v(" "),s("ol",[s("li",[e._v("对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible。")]),e._v(" "),s("li",[e._v("CMD 推崇依赖就近，AMD 推崇依赖前置。")])]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// CMD")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("define")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("require"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" exports"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" module")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'./a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 依赖可以就近书写")]),e._v("\n  a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("doSomething")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 此处略去 100 行")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'./b'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 依赖可以就近书写")]),e._v("\n  b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("doSomething")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// AMD 默认推荐的是")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("define")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'./a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'./b'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" b")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 依赖必须一开始就写好")]),e._v("\n  a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("doSomething")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 此处略去 100 行")]),e._v("\n  b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("doSomething")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),s("p",[e._v("虽然 AMD 也支持 CMD 的写法，同时还支持将 require 作为依赖项传递，但 RequireJS 的作者默认是最喜欢上面的写法，也是官方文档里默认的模块定义写法。")]),e._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[s("p",[e._v("AMD 的 API 默认是一个当多个用，CMD 的 API 严格区分，推崇职责单一。比如 AMD 里，require 分全局 require 和局部 require，都叫 require。CMD 里，没有全局 require，而是根据模块系统的完备性，提供 seajs.use 来实现模块系统的加载启动。CMD 里，每个 API 都简单纯粹。")])]),e._v(" "),s("li",[s("p",[e._v("还有一些细节差异，具体看这个规范的定义就好，就不多说了。")])])]),e._v(" "),s("h1",{attrs:{id:"commonjs规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commonjs规范"}},[e._v("#")]),e._v(" CommonJS规范")]),e._v(" "),s("p",[e._v("CommonJS是通过module.exports定义模块的，但在前端浏览器中并不支持该规范：浏览器中缺少四个Node环境变量（module，exports，require，global）\nwebpack以及Node是采用CommonJS的规范来写的")]),e._v(" "),s("h2",{attrs:{id:"特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[e._v("#")]),e._v(" 特点")]),e._v(" "),s("ol",[s("li",[e._v("如果module.exports是基本数据类型，和语言本身一样属于复制，在另一个模块中可以对该模块输出的变量重新赋值，并且不会影响其他模块的变量值。")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('//data.js\nmodule.exports = 2\n\n//test.js\nlet a = require("./data");\nconsole.log(a);//2\nmodule.exports = {\n    b:{\n        name:"zhang"\n    }\n}\n\n//app.js\nlet http = require("http");\nlet url =require("url");\nlet express = require("express");\nlet app = new express();\nlet data = require("./data/data")\ndata = 3;\nconsole.log(data);//3\nlet test = require("./data/test")\nlet cookieParser = require("cookie-parser");\napp.use(cookieParser());\napp.get("/",(req,res)=>{\n\n    res.send("express");//结束服务\n})\napp.listen(8100,"localhost",()=>{\n    console.log("服务启动了")\n})\n')])])]),s("ol",{attrs:{start:"2"}},[s("li",[e._v("对于复杂的数据类型，例如Array，Object属于浅拷贝，即同时指向一个内存空间，因此对一个模块的值的改变可以影响另一个模块。")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('//data.js\nmodule.exports = {\n    age:10\n}\n\n//test.js\nlet a = require("./data");\nconsole.log(a.age);//3\nmodule.exports = {\n    b:{\n        name:"zhang"\n    }\n}\n\n//app.js\nlet http = require("http");\nlet url =require("url");\nlet express = require("express");\nlet app = new express();\nlet data = require("./data/data")\ndata.age = 3;\nconsole.log(data.age);//3\nlet test = require("./data/test")\nlet cookieParser = require("cookie-parser");\napp.use(cookieParser());\napp.get("/",(req,res)=>{\n\n    res.send("express");//结束服务\n})\napp.listen(8100,"localhost",()=>{\n    console.log("服务启动了")\n})\n')])])]),s("ol",{attrs:{start:"3"}},[s("li",[e._v("当使用require命令加载同一个模块时，不会再执行该模块，而是取到缓存之中的值，也就是说，CommonJS模块无论加载多少次，都会在第一次加载时运行一次，以后再加载，就返回第一次运行的结果，除非手动清除系统缓存/该模块输出为对象且改变该模块的输出中的属性值")]),e._v(" "),s("li",[e._v("循环加载：CommonJS属于加载时执行，即脚本代码在require时候就会全部执行，一旦出现某个模块被循环加载，只输出(此处的输出代表只在另一个模块中导入循环加载模块的已经执行的已输出内容，即exports中的变量)已经执行的部分，未执行的部分不输出\n下述代码执行过程：")])]),e._v(" "),s("ul",[s("li",[e._v("执行c.js的内容")]),e._v(" "),s("li",[e._v("require(./a.js)：执行a.js的内容")]),e._v(" "),s("li",[e._v("在第二步执行a.js的内容时遇到require('./b.js)，故去执行b.js的内容。")]),e._v(" "),s("li",[e._v("在执行b.js的内容时，遇到require('./a.js)，遇到循环加载，故只在b中导入执行过的a.js的输出内容且不执行a.js的内容（故在b.js中可访问到a.done，但其值为false），继续执行b.js的内容（在b的内容执行完毕时从上次a中断的位置继续执行，实际上是相当于在a中导入完b.js的内容后，继续执行）")]),e._v(" "),s("li",[e._v("输出：b.js-1false")]),e._v(" "),s("li",[e._v("输出：b.js-2执行完毕")]),e._v(" "),s("li",[e._v(".js执行完毕，继续执行a.js中剩余的内容")]),e._v(" "),s("li",[e._v("输出：a.js-1true")]),e._v(" "),s("li",[e._v("输出：a.js-2执行完毕")]),e._v(" "),s("li",[e._v("执行require(./b.js)，由于已经执行过不会再执行b中的代码，所以直接导入b返回值。")]),e._v(" "),s("li",[e._v("输出：c.js-1 执行完毕 true true")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// a.js\nexports.done = false\nlet b = require('./b.js')\nconsole.log('a.js-1', b.done)\nexports.done = true\nconsole.log('a.js-2', '执行完毕')\n\n// b.js\nexports.done = false\nlet a = require('./a.js')\nconsole.log('b.js-1', a.done)\nexports.done = true\nconsole.log('b.js-2', '执行完毕')\n\n// c.js\nlet a = require('./a.js')\nlet b = require('./b.js')\n\nconsole.log('c.js-1', '执行完毕', a.done, b.done)\n")])])]),s("ol",{attrs:{start:"4"}},[s("li",[e._v("CommonJS加载模块是同步的，所以只有加载完成才能执行后面的操作。像Node.js主要用于服务器的编程，加载的模块文件一般都已经存在本地磁盘，所以加载起来比较快，不用考虑异步加载的方式，所以CommonJS规范比较实用。")])]),e._v(" "),s("h1",{attrs:{id:"amd规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#amd规范"}},[e._v("#")]),e._v(" AMD规范")]),e._v(" "),s("p",[e._v("如果在浏览器端采用CommonJS的模块规范，则会一直等待，直到模块加载完毕。这样就会导致浏览器处于’假死’状态。故浏览器端的模块，不能采用’同步加载’，只能采用’异步加载’")]),e._v(" "),s("p",[e._v("Asynchronous Module Definition（AMD）：异步模块定义\nAMD使用时需要引入第三方的库文件：RequireJS\n在浏览器端模块化开发\n在RequireJS推广过程中对模块定义的规范化产出\n推崇依赖前置：在定义模块的时候就要声明其依赖的模块，并且会立即加载其依赖的模块。\n对于依赖的模块，AMD是提前执行，不过RequireJS从2.0开始，也改成可以延迟执行。\n适合在浏览器环境中异步加载模块，可以并行加载多个模块\n提高了开发成本，并且不能按需加载，而是必须提前加载所有的依赖。\nAMD支持CMD写法，在写时需要引入SeaJS库文件。但更推荐是依赖前置。\nAMD 的API默认是一个当多个用，CMD的API严格区分，推崇职责单一。比如AMD里，require分全局require和局部require，都叫 require。CMD里，没有全局require，而是根据模块系统的完备性，提供seajs.use来实现模块系统的加载启动。CMD里，每个API都简单纯粹。")]),e._v(" "),s("ol",[s("li",[e._v("采用require()语句加载模块，但不同于CommonJS，它要求两个参数:require([module],callback)\nmodule：数组。元素是要加载的模块名称/地址\ncallback：加载成功后的回调函数")]),e._v(" "),s("li",[e._v("采用define(id,dependencies,factory)函数来暴露模块\nid（可选）：字符串，模块的标识符，如果没有提供参数，默认为文件名\ndependencies（可选）：需要引入的依赖模块，使用相对路径，数组格式\nfactory（必须）：工厂方法，回调函数，参数为返回来的模块内容，若依赖多个模块，则有多个参数。该函数返回值为当前模块暴露出去的内容。如果该值为对象，则此对象会作为模块的输入值且无法获取依赖模块的内容。如果是函数，则只被执行一次，之后调用该模块时都会从缓存中取出该函数调用值\n① 如果一个模块不依赖其他模块，那么可以直接定义在define()函数之中")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// math.js\n　　define(function (){\n　　　　var add = function (x,y){\n　　　　　　return x+y;\n　　　　};\n　　　　return {\n　　　　　　add: add\n　　　　};\n　　});\n")])])]),s("p",[e._v("② 如果这个模块还依赖其他模块，那么define()函数的第一个参数必须是一个数组，指明该模块的依赖模块的地址/模块名称。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('// math.js\n//先加载test.js模块再执行回调函数\n　　define(["./test.js"],function (res){\n\tconsole.log(res)\n\t　　　　var add = function (x,y){\n\t　　　　　　return x+y;\n\t　　　　};\n\t　　　　return {\n\t　　　　　　add: add\n\t　　　　};\n\t　　});\n\n//test.js\ndefine( function() {\n    return {\n        a:1\n    }\n});\n')])])]),s("p",[e._v("③ 允许输出模块兼容CommonJS规范，这时define方法如下：\n3. AMD采用异步加载")]),e._v(" "),s("h1",{attrs:{id:"cmd规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cmd规范"}},[e._v("#")]),e._v(" CMD规范")]),e._v(" "),s("p",[e._v("CMD(Common Module Definition)：通用模块定义。它解决的问题和AMD规范是一样的，只不过在模块定义方式和模块加载时机上不同，CMD也需要额外的引入第三方的库文件，SeaJS")]),e._v(" "),s("p",[e._v("CMD是SeaJS在推广过程中对模块定义的规范化产出\n推崇依赖就近，只有在用到某一模块的时候才会按需加载。\n延迟执行\nCMD的API严格区分，推崇职责单一")]),e._v(" "),s("ol",[s("li",[e._v("采用define()方法定义模块：define(id?,dependencies?,factory)\n① id：可选，字符串类型，模块标识，如果没有提供参数，默认为文件名。\n② dependencies：可选，字符串数组，当前模块依赖的模块地址/名称\n③ factory：回调函数，工厂方法，初始化模块需要执行的函数或对象。如果为函数，它只会在最初导入模块时调用一次，module.exports的值/返回值即为模块导出值。如果是对象，则该对象则为模块导出值。\n④ 如果③中为函数，则其参数为：(require,exports,module)，CMD推崇依赖就近，则在回调函数中需要时再引入，此时require方法的返回值即为依赖模块导出值。")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// cmd1.js\ndefine(function(require,exports,module){\n    // ...\n    module.exports={\n        // ..\n    }\n})\n\n// cmd2.js\ndefine(function(require,exports,module){    \n    var cmd2 = require('./cmd1') \n    // cmd2.xxx 依赖就近书写\n    module.exports={\n        // ...\n    }\n})\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[e._v("SeaJS提供seajs.use来加载模块：seajs.use([dependencies],function(){})\n① dependencies：字符串数组，依赖的模块地址/名称\n② function：依赖的模块都加载成功之后的回调函数，依赖的模块的导出值会以参数的形式传入，从而在回调函数中可以获取到依赖模块的导出值。")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset="UTF-8">\n        <title></title>\n    </head>\n    <body>\n        <script src="sea.js"><\/script>\n        <script src="cmd2.js"><\/script>\n        <script src="cmd1.js"><\/script>\n        <script type="text/javascript">\n            seajs.use([\'cmd2.js\',\'cmd1.js\'],function(cmd2,cmd1){\n                // ....\n            })\n        <\/script>\n    </body>\n</html>\n')])])]),s("h1",{attrs:{id:"es6模块化规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#es6模块化规范"}},[e._v("#")]),e._v(" ES6模块化规范")]),e._v(" "),s("p",[e._v("ES6`模块中的值属于动态只读引用，即不能在引用时改变模块的导出值。\n对于只读来说，即不允许修改引入变量的值，import的变量是只读的，不论是基本数据类型还是复杂数据类型。当模块遇到import命令时，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。\n对于动态来说，原始值发生变化，import加载的值也会发生变化。不论是基本数据类型还是复杂数据类型。\nES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量\nCommonJS和AMD都只能在运行时确定模块之间的依赖关系。在代码1中，其实质是整体加载fs模块（即加载fs模块的全部方法），生成一个对象导出，即_fs。然后再获取其中的stat,exists,reafFile方法使用。这种加载称为“运行时加载”，因为只有运行时才能得到这个对象，导致完全没办法在编译时做“静态优化”。\nES6模块化是编译时加载。由于ES6导出的不是对象，而是通过export命令显式指定输出的代码，再通过import命令输入。在代码2中，其实质是从fs模块中加载三个方法，不需要加载其中的所有方法，这种加载称为“编译时加载”或者静态加载，即 ES6 可以在编译时就完成模块加载。效率要比 CommonJS 模块的加载方式高。当然，这也导致了没法引用 ES6 模块本身，因为它不是对象。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("//代码1\n// CommonJS模块\nlet { stat, exists, readFile } = require('fs');\n\n// 等同于\nlet _fs = require('fs');\nlet stat = _fs.stat;\nlet exists = _fs.exists;\nlet readfile = _fs.readfile;\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("//代码2\n// ES6模块\nimport { stat, exists, readFile } from 'fs';\n")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);