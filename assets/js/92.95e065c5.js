(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{448:function(e,v,_){"use strict";_.r(v);var t=_(42),c=Object(t.a)({},(function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h1",{attrs:{id:"reflect"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#reflect"}},[e._v("#")]),e._v(" ⭐️Reflect")]),e._v(" "),_("p"),_("div",{staticClass:"table-of-contents"},[_("ul",[_("li",[_("a",{attrs:{href:"#概述"}},[e._v("概述")])]),_("li",[_("a",{attrs:{href:"#方法"}},[e._v("方法")])]),_("li",[_("a",{attrs:{href:"#设计理念"}},[e._v("设计理念")])])])]),_("p"),e._v(" "),_("h2",{attrs:{id:"概述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),_("p",[e._v("与大多数全局对象不同，Reflect不是一个构造函数。你不能将其与一个new运算符一起使用，或者将Reflect对象作为一个函数来调用。Reflect的所有属性和方法都是静态的（就像Math对象）。")]),e._v(" "),_("h2",{attrs:{id:"方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[e._v("#")]),e._v(" 方法")]),e._v(" "),_("p",[e._v("Reflect对象提供以下13个静态函数，它们具有与处理器对象方法相同的名称。这些方法中的一些与 Object 上的对应方法相同。")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("Reflect.apply()")]),e._v("：对一个函数进行调用操作，同时可以传入一个数组作为调用参数。和"),_("code",[e._v("Function.prototype.apply()")]),e._v("功能类似；")]),e._v(" "),_("li",[_("code",[e._v("Reflect.construct()")]),e._v("：对构造函数进行"),_("code",[e._v("new")]),e._v("操作，相当于执行"),_("code",[e._v("new target(...args)")]),e._v("；")]),e._v(" "),_("li",[_("code",[e._v("Reflect.defineProperty()")]),e._v("：和"),_("code",[e._v("Object.defineProperty()")]),e._v("类似；")]),e._v(" "),_("li",[_("code",[e._v("Reflect.deleteProperty()")]),e._v("：作为函数的"),_("code",[e._v("delete")]),e._v("操作符，相当于执行"),_("code",[e._v("delete target[name]")]),e._v("；")]),e._v(" "),_("li",[_("code",[e._v("Reflect.enumerate()")]),e._v("：该方法会返回一个包含有目标对象身上所有可枚举的自身字符串属性以及继承字符串属性的迭代器，"),_("code",[e._v("for...in")]),e._v("操作遍历到的正是这些属性；")]),e._v(" "),_("li",[_("code",[e._v("Reflect.get()")]),e._v("：获取对象身上某个属性的值，类似于"),_("code",[e._v("target[name]")]),e._v("；")]),e._v(" "),_("li",[_("code",[e._v("Reflect.getOwnPropertyDescriptor()")]),e._v("：类似于"),_("code",[e._v("Object.getOwnPropertyDescriptor()")]),e._v("；")]),e._v(" "),_("li",[_("code",[e._v("Reflect.getPrototypeOf()")]),e._v("：类似于"),_("code",[e._v("Object.getPrototypeOf()")]),e._v("；")]),e._v(" "),_("li",[_("code",[e._v("Reflect.has()")]),e._v("：判断一个对象是否存在某个属性，和 "),_("code",[e._v("in")]),e._v("运算符的功能完全相同；")]),e._v(" "),_("li",[_("code",[e._v("Reflect.isExtensible()")]),e._v("：类似于"),_("code",[e._v("Object.isExtensible()")]),e._v("；")]),e._v(" "),_("li",[_("code",[e._v("Reflect.ownKeys()")]),e._v("：返回一个包含所有自身属性（不包含继承属性）的数组。(类似于"),_("code",[e._v("Object.keys()")]),e._v("，但不会受"),_("code",[e._v("enumerable")]),e._v("影响)；")]),e._v(" "),_("li",[_("code",[e._v("Reflect.preventExtensions()")]),e._v("：类似于"),_("code",[e._v("Object.preventExtensions()")]),e._v("。返回一个Boolean；")]),e._v(" "),_("li",[_("code",[e._v("Reflect.set()")]),e._v("：将值分配给属性的函数。返回一个"),_("code",[e._v("Boolean")]),e._v("，如果更新成功，则返回"),_("code",[e._v("true")]),e._v("；")]),e._v(" "),_("li",[_("code",[e._v("Reflect.setPrototypeOf()")]),e._v("：类似于"),_("code",[e._v("Object.setPrototypeOf()")]),e._v("。")])]),e._v(" "),_("h2",{attrs:{id:"设计理念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#设计理念"}},[e._v("#")]),e._v(" 设计理念")]),e._v(" "),_("p",[_("code",[e._v("Reflect")]),e._v("对象与"),_("code",[e._v("Proxy")]),e._v("对象一样，也是ES6为了操作对象而提供的新API。"),_("code",[e._v("Reflect")]),e._v("对象的设计目的有这样几个。")]),e._v(" "),_("ol",[_("li",[e._v("将"),_("code",[e._v("Object")]),e._v("对象的一些明显属于语言内部的方法（比如"),_("code",[e._v("Object.defineProperty")]),e._v("），放到"),_("code",[e._v("Reflect")]),e._v("对象上。现阶段，某些方法同时在"),_("code",[e._v("Object")]),e._v("和"),_("code",[e._v("Reflect")]),e._v("对象上部署，未来的新方法将只部署在"),_("code",[e._v("Reflect")]),e._v("对象上。也就是说，从"),_("code",[e._v("Reflect")]),e._v("对象上可以拿到语言内部的方法。")]),e._v(" "),_("li",[e._v("修改某些"),_("code",[e._v("Object")]),e._v("方法的返回结果，让其变得更合理。比如，"),_("code",[e._v("Object.defineProperty(obj, name, desc)")]),e._v("在无法定义属性时，会抛出一个错误，而"),_("code",[e._v("Reflect.defineProperty(obj, name, desc)")]),e._v("则会返回"),_("code",[e._v("false")]),e._v("。")]),e._v(" "),_("li",[e._v("让"),_("code",[e._v("Object")]),e._v("操作都变成函数行为。某些"),_("code",[e._v("Object")]),e._v("操作是命令式，比如"),_("code",[e._v("name in obj")]),e._v("和"),_("code",[e._v("delete obj[name]")]),e._v("，而"),_("code",[e._v("Reflect.has(obj, name)")]),e._v("和"),_("code",[e._v("Reflect.deleteProperty(obj, name)")]),e._v("让它们变成了函数行为。")]),e._v(" "),_("li",[_("code",[e._v("Reflect")]),e._v("对象的方法与"),_("code",[e._v("Proxy")]),e._v("对象的方法一一对应，只要是"),_("code",[e._v("Proxy")]),e._v("对象的方法，就能在"),_("code",[e._v("Reflect")]),e._v("对象上找到对应的方法。这就让"),_("code",[e._v("Proxy")]),e._v("对象可以方便地调用对应的"),_("code",[e._v("Reflect")]),e._v("方法，完成默认行为，作为修改行为的基础。也就是说，不管"),_("code",[e._v("Proxy")]),e._v("怎么修改默认行为，你总可以在"),_("code",[e._v("Reflect")]),e._v("上获取默认行为。")])])])}),[],!1,null,null,null);v.default=c.exports}}]);