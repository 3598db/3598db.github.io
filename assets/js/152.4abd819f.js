(window.webpackJsonp=window.webpackJsonp||[]).push([[152],{507:function(a,t,v){"use strict";v.r(t);var _=v(42),s=Object(_.a)({},(function(){var a=this,t=a.$createElement,v=a._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("h1",{attrs:{id:"微前端总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#微前端总结"}},[a._v("#")]),a._v(" 微前端总结")]),a._v(" "),v("h1",{attrs:{id:"背景"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[a._v("#")]),a._v(" 背景")]),a._v(" "),v("ul",[v("li",[a._v("微服务的架构和思想在前端的映射和落地")]),a._v(" "),v("li",[a._v("针对复杂且大型的web前端的整体架构和组织结构问题,将单体的前端拆分成更小,更简单的模块,使其可以独立开发,测试和部署,最后将其整合到一起.")])]),a._v(" "),v("h1",{attrs:{id:"微前端的核心价值"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#微前端的核心价值"}},[a._v("#")]),a._v(" 微前端的核心价值")]),a._v(" "),v("ul",[v("li",[a._v("无视技术栈差异")]),a._v(" "),v("li",[a._v("项目解耦")]),a._v(" "),v("li",[a._v("子项目独立开发 测试 部署")])]),a._v(" "),v("h1",{attrs:{id:"微前端的拆分方式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#微前端的拆分方式"}},[a._v("#")]),a._v(" 微前端的拆分方式")]),a._v(" "),v("ul",[v("li",[a._v("按功能")]),a._v(" "),v("li",[a._v("按业务逻辑")]),a._v(" "),v("li",[a._v("按前端路由")])]),a._v(" "),v("h1",{attrs:{id:"应用场景"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[a._v("#")]),a._v(" 应用场景")]),a._v(" "),v("ul",[v("li",[a._v("业务越来越多")]),a._v(" "),v("li",[a._v("组件越来越多")]),a._v(" "),v("li",[a._v("文件越来越多")]),a._v(" "),v("li",[a._v("打包编译越来越慢")]),a._v(" "),v("li",[a._v("开发启动速度越来越慢")]),a._v(" "),v("li",[a._v("定位文件越来越慢")])]),a._v(" "),v("h1",{attrs:{id:"微前端落地的集中实现方式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#微前端落地的集中实现方式"}},[a._v("#")]),a._v(" 微前端落地的集中实现方式")]),a._v(" "),v("ul",[v("li",[a._v("npm:子系统以npm包形式发布,打包构建时集成到主系统一起打包发布")]),a._v(" "),v("li",[a._v("iframe:工程质检完全独立,以iframe的方式集成到主系统,这样也能使用不同的技术栈去实现")]),a._v(" "),v("li",[a._v("使用现有的微前端框架:single-spa,mooa,qiankun")])]),a._v(" "),v("h1",{attrs:{id:"微前端基本原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#微前端基本原理"}},[a._v("#")]),a._v(" 微前端基本原理")]),a._v(" "),v("p",[a._v("和微服务一样,微前端独立部署是关键,减少服务间的耦合性,无论前端代码部署在哪里.每个前端都有自己持续交付的流水线,进行构建,测试,部署到生产环境中,最后将多个子系统集成到主系统中.")])])}),[],!1,null,null,null);t.default=s.exports}}]);