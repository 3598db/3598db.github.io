(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{441:function(t,s,a){"use strict";a.r(s);var e=a(42),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"对象的扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象的扩展"}},[t._v("#")]),t._v(" ⭐️对象的扩展")]),t._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#属性的简洁表示法"}},[t._v("属性的简洁表示法")])]),a("li",[a("a",{attrs:{href:"#属性名表达式"}},[t._v("属性名表达式")])]),a("li",[a("a",{attrs:{href:"#方法的-name-属性"}},[t._v("方法的 name 属性")])]),a("li",[a("a",{attrs:{href:"#属性的可枚举性和遍历"}},[t._v("属性的可枚举性和遍历")]),a("ul",[a("li",[a("a",{attrs:{href:"#可枚举性"}},[t._v("可枚举性")])]),a("li",[a("a",{attrs:{href:"#属性的遍历"}},[t._v("属性的遍历")])])])]),a("li",[a("a",{attrs:{href:"#super-关键字"}},[t._v("super 关键字")])]),a("li",[a("a",{attrs:{href:"#对象的扩展运算符"}},[t._v("对象的扩展运算符")]),a("ul",[a("li",[a("a",{attrs:{href:"#解构赋值"}},[t._v("解构赋值")])]),a("li",[a("a",{attrs:{href:"#扩展运算符"}},[t._v("扩展运算符")])])])]),a("li",[a("a",{attrs:{href:"#链判断运算符"}},[t._v("链判断运算符")])]),a("li",[a("a",{attrs:{href:"#null-判断运算符"}},[t._v("Null 判断运算符")])])])]),a("p"),t._v(" "),a("h2",{attrs:{id:"属性的简洁表示法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性的简洁表示法"}},[t._v("#")]),t._v(" 属性的简洁表示法")]),t._v(" "),a("p",[t._v("注意，简写的对象方法不能用作构造函数，会报错。")]),t._v(" "),a("h2",{attrs:{id:"属性名表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性名表达式"}},[t._v("#")]),t._v(" 属性名表达式")]),t._v(" "),a("p",[t._v("注意，属性名表达式与简洁表示法，不能同时使用，会报错。")]),t._v(" "),a("p",[t._v("注意，属性名表达式如果是一个对象，默认情况下会自动将对象转为字符串[object Object]，这一点要特别小心。")]),t._v(" "),a("h2",{attrs:{id:"方法的-name-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法的-name-属性"}},[t._v("#")]),t._v(" 方法的 name 属性")]),t._v(" "),a("p",[t._v("如果对象的方法使用了取值函数（getter）和存值函数（setter），则name属性不是在该方法上面，而是该方法的属性的描述对象的get和set属性上面，返回值是方法名前加上get和set。")]),t._v(" "),a("p",[t._v("有两种特殊情况：")]),t._v(" "),a("ol",[a("li",[t._v("bind方法创造的函数，name属性返回bound加上原函数的名字；")]),t._v(" "),a("li",[t._v("Function构造函数创造的函数，name属性返回anonymous。")])]),t._v(" "),a("p",[t._v("如果对象的方法是一个 Symbol 值，那么name属性返回的是这个Symbol值的描述。")]),t._v(" "),a("h2",{attrs:{id:"属性的可枚举性和遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性的可枚举性和遍历"}},[t._v("#")]),t._v(" 属性的可枚举性和遍历")]),t._v(" "),a("h3",{attrs:{id:"可枚举性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可枚举性"}},[t._v("#")]),t._v(" 可枚举性")]),t._v(" "),a("p",[t._v("对象的每个属性都有一个描述对象（Descriptor），用来控制该属性的行为。Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象。")]),t._v(" "),a("p",[t._v("目前，有四个操作会忽略enumerable为false的属性。")]),t._v(" "),a("ol",[a("li",[t._v("for...in循环：只遍历对象自身的和继承的可枚举的属性。")]),t._v(" "),a("li",[t._v("Object.keys()：返回对象自身的所有可枚举的属性的键名。")]),t._v(" "),a("li",[t._v("JSON.stringify()：只串行化对象自身的可枚举的属性。")]),t._v(" "),a("li",[t._v("Object.assign()： 忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。")])]),t._v(" "),a("p",[t._v("另外，ES6 规定，所有 Class 的原型的方法都是不可枚举的。")]),t._v(" "),a("h3",{attrs:{id:"属性的遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性的遍历"}},[t._v("#")]),t._v(" 属性的遍历")]),t._v(" "),a("p",[t._v("ES6 一共有 5 种方法可以遍历对象的属性。")]),t._v(" "),a("ol",[a("li",[t._v("for...in：for...in循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。")]),t._v(" "),a("li",[t._v("Object.keys(obj)：Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名。")]),t._v(" "),a("li",[t._v("Object.getOwnPropertyNames(obj)：Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名。")]),t._v(" "),a("li",[t._v("Object.getOwnPropertySymbols(obj)：Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有 Symbol 属性的键名。")]),t._v(" "),a("li",[t._v("Reflect.ownKeys(obj)")])]),t._v(" "),a("p",[t._v("Reflect.ownKeys返回一个数组，包含对象自身的所有键名，不管键名是Symbol或字符串，也不管是否可枚举。")]),t._v(" "),a("p",[t._v("以上的 5 种方法遍历对象的键名，都遵守同样的属性遍历的次序规则。")]),t._v(" "),a("ul",[a("li",[t._v("首先遍历所有数值键，按照数值升序排列。")]),t._v(" "),a("li",[t._v("其次遍历所有字符串键，按照加入时间升序排列。")]),t._v(" "),a("li",[t._v("最后遍历所有 Symbol 键，按照加入时间升序排列。")])]),t._v(" "),a("h2",{attrs:{id:"super-关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#super-关键字"}},[t._v("#")]),t._v(" super 关键字")]),t._v(" "),a("p",[t._v("注意，super关键字表示原型对象时，只能用在对象的方法之中，用在其他地方都会报错。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  foo"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("上面三种super的用法都会报错，因为对于 JavaScript 引擎来说，这里的super都没有用在对象的方法之中。第一种写法是super用在属性里面，第二种和第三种写法是super用在一个函数里面，然后赋值给foo属性。目前，只有对象方法的简写法可以让 JavaScript 引擎确认，定义的是对象的方法。")]),t._v(" "),a("p",[t._v("JavaScript 引擎内部，super.foo等同于Object.getPrototypeOf(this).foo（属性）或Object.getPrototypeOf(this).foo.call(this)（方法）。")]),t._v(" "),a("h2",{attrs:{id:"对象的扩展运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象的扩展运算符"}},[t._v("#")]),t._v(" 对象的扩展运算符")]),t._v(" "),a("h3",{attrs:{id:"解构赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解构赋值"}},[t._v("#")]),t._v(" 解构赋值")]),t._v(" "),a("p",[t._v("由于解构赋值要求等号右边是一个对象，所以如果等号右边是undefined或null，就会报错，因为它们无法转为对象。")]),t._v(" "),a("p",[t._v("解构赋值必须是最后一个参数，否则会报错。")]),t._v(" "),a("p",[t._v("注意，解构赋值的拷贝是浅拷贝，即如果一个键的值是复合类型的值（数组、对象、函数）、那么解构赋值拷贝的是这个值的引用，而不是这个值的副本。")]),t._v(" "),a("p",[t._v("另外，扩展运算符的解构赋值，不能复制继承自原型对象的属性。")]),t._v(" "),a("p",[t._v("上面代码中，变量x是单纯的解构赋值，所以可以读取对象o继承的属性；变量y和z是扩展运算符的解构赋值，只能读取对象o自身的属性，所以变量z可以赋值成功，变量y取不到值。")]),t._v(" "),a("h3",{attrs:{id:"扩展运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩展运算符"}},[t._v("#")]),t._v(" 扩展运算符")]),t._v(" "),a("p",[t._v("对象的扩展运算符（...）用于取出参数对象的所有可遍历属性，拷贝到当前对象之中。")]),t._v(" "),a("p",[t._v("由于数组是特殊的对象，所以对象的扩展运算符也可以用于数组。")]),t._v(" "),a("p",[t._v("如果扩展运算符后面是一个空对象，则没有任何效果。")]),t._v(" "),a("p",[t._v("如果扩展运算符后面不是对象，则会自动将其转为对象。")]),t._v(" "),a("p",[t._v("对象的扩展运算符等同于使用Object.assign()方法。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" o "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\no"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("z "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("newObj "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" z "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nx "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\ny "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\nz "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\n")])])]),a("p",[t._v("上面的例子只是拷贝了对象实例的属性，如果想完整克隆一个对象，还拷贝对象原型的属性，可以采用下面的写法。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("与数组的扩展运算符一样，对象的扩展运算符后面可以跟表达式。")]),t._v(" "),a("p",[t._v("扩展运算符的参数对象之中，如果有取值函数get，这个函数是会执行的。")]),t._v(" "),a("h2",{attrs:{id:"链判断运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链判断运算符"}},[t._v("#")]),t._v(" 链判断运算符")]),t._v(" "),a("p",[t._v("链判断运算符有三种用法。")]),t._v(" "),a("ul",[a("li",[t._v("obj?.prop // 对象属性")]),t._v(" "),a("li",[t._v("obj?.[expr] // 同上")]),t._v(" "),a("li",[t._v("func?.(...args) // 函数或对象方法的调用")])]),t._v(" "),a("h2",{attrs:{id:"null-判断运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#null-判断运算符"}},[t._v("#")]),t._v(" Null 判断运算符")]),t._v(" "),a("p",[t._v("ES2020 引入了一个新的 Null 判断运算符??。它的行为类似||，但是只有运算符左侧的值为null或undefined时，才会返回右侧的值。")])])}),[],!1,null,null,null);s.default=n.exports}}]);