(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{379:function(e,n,r){"use strict";r.r(n);var o=r(42),t=Object(o.a)({},(function(){var e=this,n=e.$createElement,r=e._self._c||n;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"performance-api"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#performance-api"}},[e._v("#")]),e._v(" ⭐️Performance API")]),e._v(" "),r("p"),r("div",{staticClass:"table-of-contents"},[r("ul",[r("li",[r("a",{attrs:{href:"#performance-timing"}},[e._v("performance.timing")])]),r("li",[r("a",{attrs:{href:"#performance-navigation"}},[e._v("performance.navigation")])]),r("li",[r("a",{attrs:{href:"#performance-memory"}},[e._v("performance.memory")])]),r("li",[r("a",{attrs:{href:"#performancetiming-对象"}},[e._v("PerformanceTiming对象")])]),r("li",[r("a",{attrs:{href:"#比较直观的图片描述"}},[e._v("比较直观的图片描述")])]),r("li",[r("a",{attrs:{href:"#参考链接"}},[e._v("参考链接")])])])]),e._v("\nWeb Performance API允许网页访问某些函数来测量网页和Web应用程序的性能，包括 Navigation Timing API和高分辨率时间数据。"),r("p"),e._v(" "),r("h2",{attrs:{id:"performance-timing"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#performance-timing"}},[e._v("#")]),e._v(" "),r("code",[e._v("performance.timing")])]),e._v(" "),r("p",[e._v("是一个PerformanceTiming 对象,包含延迟相关的性能信息。")]),e._v(" "),r("h2",{attrs:{id:"performance-navigation"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#performance-navigation"}},[e._v("#")]),e._v(" "),r("code",[e._v("performance.navigation")])]),e._v(" "),r("p",[e._v("是一个 PerformanceNavigation 对象，该对象表示在当前给定浏览上下文中网页导航的类型（译者注：TYPE_BACK_FORWARD，TYPE_NAVIGATE， TYPE_RELOAD，TYPE_RESERVED）以及次数。")]),e._v(" "),r("h2",{attrs:{id:"performance-memory"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#performance-memory"}},[e._v("#")]),e._v(" "),r("code",[e._v("performance.memory")])]),e._v(" "),r("ul",[r("li",[e._v("usedJsHeapSize是JS对象（包括V8内部对象）正在使用的内存总量；")]),e._v(" "),r("li",[e._v("totalJsHeapSize是JS堆的当前大小，包括未被任何JS对象占用的可用空间；")]),e._v(" "),r("li",[e._v("这意味着usedJsHeapSize不能大于totalJsHeapSize；")]),e._v(" "),r("li",[e._v("请注意，不一定存在活动的JS对象的totalJsHeapSize。")])]),e._v(" "),r("h2",{attrs:{id:"performancetiming对象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#performancetiming对象"}},[e._v("#")]),e._v(" "),r("code",[e._v("PerformanceTiming")]),e._v("对象")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("PerformanceTiming.navigationStart")]),e._v(" - 是一个无符号long long 型的毫秒数，表征了从同一个浏览器上下文的上一个文档卸载(unload)结束时的UNIX时间戳。如果没有上一个文档，这个值会和PerformanceTiming.fetchStart相同。")]),e._v(" "),r("li",[r("code",[e._v("PerformanceTiming.unloadEventStart")]),e._v(" - 是一个无符号long long 型的毫秒数，表征了unload事件抛出时的UNIX时间戳。如果没有上一个文档，or if the previous document, or one of the needed redirects, is not of the same origin, 这个值会返回0.")]),e._v(" "),r("li",[r("code",[e._v("PerformanceTiming.unloadEventEnd")]),e._v(" - 是一个无符号long long 型的毫秒数，表征了unload事件处理完成时的UNIX时间戳。如果没有上一个文档，or if the previous document, or one of the needed redirects, is not of the same origin, 这个值会返回0.")]),e._v(" "),r("li",[r("code",[e._v("PerformanceTiming.redirectStart")]),e._v(" - 是一个无符号long long 型的毫秒数，表征了第一个HTTP重定向开始时的UNIX时间戳。如果没有重定向，或者重定向中的一个不同源，这个值会返回0.")]),e._v(" "),r("li",[r("code",[e._v("PerformanceTiming.redirectEnd")]),e._v(" - 是一个无符号long long 型的毫秒数，表征了最后一个HTTP重定向完成时（也就是说是HTTP响应的最后一个比特直接被收到的时间）的UNIX时间戳。如果没有重定向，或者重定向中的一个不同源，这个值会返回0.")]),e._v(" "),r("li",[r("code",[e._v("PerformanceTiming.fetchStart")]),e._v(" - 是一个无符号long long 型的毫秒数，表征了浏览器准备好使用HTTP请求来获取(fetch)文档的UNIX时间戳。这个时间点会在检查任何应用缓存之前。")]),e._v(" "),r("li",[r("code",[e._v("PerformanceTiming.domainLookupStart")]),e._v(" - 是一个无符号long long 型的毫秒数，表征了域名查询开始的UNIX时间戳。如果使用了持续连接(persistent connection)，或者这个信息存储到了缓存或者本地资源上，这个值将和 PerformanceTiming.fetchStart一致。")]),e._v(" "),r("li",[r("code",[e._v("PerformanceTiming.domainLookupEnd")]),e._v(" - 是一个无符号long long 型的毫秒数，表征了域名查询结束的UNIX时间戳。如果使用了持续连接(persistent connection)，或者这个信息存储到了缓存或者本地资源上，这个值将和 PerformanceTiming.fetchStart一致。")]),e._v(" "),r("li",[r("code",[e._v("PerformanceTiming.connectStart")]),e._v(" - 是一个无符号long long 型的毫秒数，返回HTTP请求开始向服务器发送时的Unix毫秒时间戳。如果使用持久连接（persistent connection），则返回值等同于fetchStart属性的值。")]),e._v(" "),r("li",[r("code",[e._v("PerformanceTiming.connectEnd")]),e._v(" - 是一个无符号long long 型的毫秒数，返回浏览器与服务器之间的连接建立时的Unix毫秒时间戳。如果建立的是持久连接，则返回值等同于fetchStart属性的值。连接建立指的是所有握手和认证过程全部结束。")]),e._v(" "),r("li",[r("code",[e._v("PerformanceTiming.secureConnectionStart")]),e._v(" - 是一个无符号long long 型的毫秒数，返回浏览器与服务器开始安全链接的握手时的Unix毫秒时间戳。如果当前网页不要求安全连接，则返回0。")]),e._v(" "),r("li",[r("code",[e._v("PerformanceTiming.requestStart")]),e._v(" - 是一个无符号long long 型的毫秒数，返回浏览器向服务器发出HTTP请求时（或开始读取本地缓存时）的Unix毫秒时间戳。")]),e._v(" "),r("li",[r("code",[e._v("PerformanceTiming.responseStart")]),e._v(" - 是一个无符号long long 型的毫秒数，返回浏览器从服务器收到（或从本地缓存读取）第一个字节时的Unix毫秒时间戳。如果传输层在开始请求之后失败并且连接被重开，该属性将会被数制成新的请求的相对应的发起时间。")]),e._v(" "),r("li",[r("code",[e._v("PerformanceTiming.responseEnd")]),e._v(" - 是一个无符号long long 型的毫秒数，返回浏览器从服务器收到（或从本地缓存读取，或从本地资源读取）最后一个字节时（如果在此之前HTTP连接已经关闭，则返回关闭时）的Unix毫秒时间戳。")]),e._v(" "),r("li",[r("code",[e._v("PerformanceTiming.domLoading")]),e._v(" - 是一个无符号long long 型的毫秒数，返回当前网页DOM结构开始解析时（即Document.readyState属性变为“loading”、相应的 readystatechange事件触发时）的Unix毫秒时间戳。")]),e._v(" "),r("li",[r("code",[e._v("PerformanceTiming.domInteractive")]),e._v(" - 是一个无符号long long 型的毫秒数，返回当前网页DOM结构结束解析、开始加载内嵌资源时（即Document.readyState属性变为“interactive”、相应的readystatechange事件触发时）的Unix毫秒时间戳。")]),e._v(" "),r("li",[r("code",[e._v("PerformanceTiming.domContentLoadedEventStart")]),e._v(" - 是一个无符号long long 型的毫秒数，返回当解析器发送DOMContentLoaded 事件，即所有需要被执行的脚本已经被解析时的Unix毫秒时间戳。")]),e._v(" "),r("li",[r("code",[e._v("PerformanceTiming.domContentLoadedEventEnd")]),e._v(" - 是一个无符号long long 型的毫秒数，返回当所有需要立即执行的脚本已经被执行（不论执行顺序）时的Unix毫秒时间戳。")]),e._v(" "),r("li",[r("code",[e._v("PerformanceTiming.domComplete")]),e._v(" - 是一个无符号long long 型的毫秒数，返回当前文档解析完成，即Document.readyState 变为 'complete'且相对应的readystatechange 被触发时的Unix毫秒时间戳。")]),e._v(" "),r("li",[r("code",[e._v("PerformanceTiming.loadEventStart")]),e._v(" - 是一个无符号long long 型的毫秒数，返回该文档下，load事件被发送时的Unix毫秒时间戳。如果这个事件还未被发送，它的值将会是0。")]),e._v(" "),r("li",[r("code",[e._v("PerformanceTiming.loadEventEnd")]),e._v(" - 是一个无符号long long 型的毫秒数，返回当load事件结束，即加载事件完成时的Unix毫秒时间戳。如果这个事件还未被发送，或者尚未完成，它的值将会是0.")])]),e._v(" "),r("h2",{attrs:{id:"比较直观的图片描述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#比较直观的图片描述"}},[e._v("#")]),e._v(" 比较直观的图片描述")]),e._v(" "),r("p",[r("img",{attrs:{src:"/img/168c82e5cc721387",alt:""}})]),e._v(" "),r("h2",{attrs:{id:"参考链接"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考链接"}},[e._v("#")]),e._v(" 参考链接")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Performance",target:"_blank",rel:"noopener noreferrer"}},[e._v("MDN > Web API 接口参考 > Performance"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);n.default=t.exports}}]);