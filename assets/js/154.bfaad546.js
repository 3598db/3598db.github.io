(window.webpackJsonp=window.webpackJsonp||[]).push([[154],{508:function(l,e,a){"use strict";a.r(e);var v=a(42),_=Object(v.a)({},(function(){var l=this,e=l.$createElement,a=l._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":l.$parent.slotKey}},[a("h1",{attrs:{id:"webpack-知识点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-知识点"}},[l._v("#")]),l._v(" webpack 知识点")]),l._v(" "),a("ul",[a("li",[l._v("前端资源模块化管理和打包工具")]),l._v(" "),a("li",[l._v("按照依赖和规则递归构建依赖关系图，生成前端资源")])]),l._v(" "),a("p",[l._v("一. 常规loader")]),l._v(" "),a("ul",[a("li",[l._v("编译相关：babel-loader、ts-loader")]),l._v(" "),a("li",[l._v("样式相关：style-loader、css-loader、less-loader、postcss-loader")]),l._v(" "),a("li",[l._v("文件相关：file-loader、url-loader\nwebpack把每个文件（.css .html .less .jpg etc.）都作为模块处理，而webpack只能理解JavaScript，loader则会将这些文件转换为模块，添加到依赖图表中。主要预处理通过require()/import语句引入的文件。")])]),l._v(" "),a("p",[l._v("二. 常规plugin")]),l._v(" "),a("ul",[a("li",[l._v("优化相关：CommonsChunkPlugin、UglifyjsWebpackPlugin")]),l._v(" "),a("li",[l._v("功能相关：ExtractTextWebpackPlugin、HtmlWebpackPlugin、HotModuleRepacementPlugin、CopyWebpackPlugin")])]),l._v(" "),a("p",[l._v("三. 概念")]),l._v(" "),a("ol",[a("li",[l._v("module chunk bundle")])]),l._v(" "),a("ul",[a("li",[l._v("module：开发阶段概念，未经处理的一个个文件")]),l._v(" "),a("li",[l._v("chunk：打包阶段观念，根据入口模块生成的中间产物")]),l._v(" "),a("li",[l._v("bundle：构建完成概念，和chunk一一对应，除非提取出第三方包或者css")])]),l._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[l._v("filename chunkFilename")])]),l._v(" "),a("ul",[a("li",[l._v("filename：入口文件对应的输出文件")]),l._v(" "),a("li",[l._v("chunkFilename：懒加载文件")])]),l._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[l._v("webpackPrefetch webpackPreload webpackChunkName")])]),l._v(" "),a("ul",[a("li",[l._v("webpackChunkName：预加载的文件取别名")]),l._v(" "),a("li",[l._v("webpackPrefetch：浏览器空闲下载文件")]),l._v(" "),a("li",[l._v("weebpackPreload：父chunk加载并行下载")])]),l._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[l._v("hash chunkhash contenthash")])]),l._v(" "),a("ul",[a("li",[l._v("hash：整个项目构建")]),l._v(" "),a("li",[l._v("chunkhash：同一个chunk内容相关")]),l._v(" "),a("li",[l._v("contenthash：文件内容相关")])]),l._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[l._v("eval cheap inline module")])]),l._v(" "),a("ul",[a("li",[l._v("eval：打包后的模块都是eval")]),l._v(" "),a("li",[l._v("cheap： map映射只显示行不显示列，忽略源自loader的source map")]),l._v(" "),a("li",[l._v("inline：映射文件以base64格式编码，加在bundle文件最后，不产生独立的map文件")]),l._v(" "),a("li",[l._v("module：增加对loader source map和第三方模块的映射")])])])}),[],!1,null,null,null);e.default=_.exports}}]);